
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad8  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006cd0  08006cd0  00007cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d70  08006d70  00008160  2**0
                  CONTENTS
  4 .ARM          00000008  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d78  08006d78  00008160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d7c  08006d7c  00007d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08006d80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000020  08006da0  00008020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000c0  08006e40  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000075c  20000160  08006ee0  00008160  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200008bc  08006ee0  000088bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00008160  2**0
                  CONTENTS, READONLY
 14 .debug_info   000179ee  00000000  00000000  0000818e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bfb  00000000  00000000  0001fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013e8  00000000  00000000  00022778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f96  00000000  00000000  00023b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029fb0  00000000  00000000  00024af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001831d  00000000  00000000  0004eaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001088e7  00000000  00000000  00066dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016f6aa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000559c  00000000  00000000  0016f6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00174c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000160 	.word	0x20000160
 8000214:	00000000 	.word	0x00000000
 8000218:	08006cb8 	.word	0x08006cb8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000164 	.word	0x20000164
 8000234:	08006cb8 	.word	0x08006cb8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <playBuzzerTone>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void playBuzzerTone(uint16_t duration) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 8000532:	481e      	ldr	r0, [pc, #120]	@ (80005ac <playBuzzerTone+0x84>)
 8000534:	f001 fedc 	bl	80022f0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000538:	f04f 31ff 	mov.w	r1, #4294967295
 800053c:	481b      	ldr	r0, [pc, #108]	@ (80005ac <playBuzzerTone+0x84>)
 800053e:	f001 ffd9 	bl	80024f4 <HAL_ADC_PollForConversion>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d10c      	bne.n	8000562 <playBuzzerTone+0x3a>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 8000548:	4818      	ldr	r0, [pc, #96]	@ (80005ac <playBuzzerTone+0x84>)
 800054a:	f002 f85e 	bl	800260a <HAL_ADC_GetValue>
 800054e:	4603      	mov	r3, r0
 8000550:	4a17      	ldr	r2, [pc, #92]	@ (80005b0 <playBuzzerTone+0x88>)
 8000552:	6013      	str	r3, [r2, #0]
	  if (adcValue == 0) adcValue = 1;
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <playBuzzerTone+0x88>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <playBuzzerTone+0x3a>
 800055c:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <playBuzzerTone+0x88>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8000562:	4812      	ldr	r0, [pc, #72]	@ (80005ac <playBuzzerTone+0x84>)
 8000564:	f001 ff92 	bl	800248c <HAL_ADC_Stop>

	__HAL_TIM_SET_PRESCALER(&htim10, (108000000/(1000*(adcValue/20)))-1);
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <playBuzzerTone+0x88>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a11      	ldr	r2, [pc, #68]	@ (80005b4 <playBuzzerTone+0x8c>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000578:	fb02 f303 	mul.w	r3, r2, r3
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <playBuzzerTone+0x90>)
 800057e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <playBuzzerTone+0x94>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3a01      	subs	r2, #1
 8000588:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	480b      	ldr	r0, [pc, #44]	@ (80005bc <playBuzzerTone+0x94>)
 800058e:	f004 fbf9 	bl	8004d84 <HAL_TIM_PWM_Start>

	HAL_Delay(duration);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fe43 	bl	8002220 <HAL_Delay>

	HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <playBuzzerTone+0x94>)
 800059e:	f004 fceb 	bl	8004f78 <HAL_TIM_PWM_Stop>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200001b8 	.word	0x200001b8
 80005b0:	20000004 	.word	0x20000004
 80005b4:	cccccccd 	.word	0xcccccccd
 80005b8:	066ff300 	.word	0x066ff300
 80005bc:	200002fc 	.word	0x200002fc

080005c0 <LED_RGB_Cycle>:

void LED_RGB_Cycle(TIM_HandleTypeDef *htim) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	@ 0x38
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

	playBuzzerTone(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005cc:	f7ff ffac 	bl	8000528 <playBuzzerTone>

	for (int i = 0; i < 3; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80005d4:	e00a      	b.n	80005ec <LED_RGB_Cycle+0x2c>
	  HAL_TIM_PWM_Start(&htim3, channels[i]);
 80005d6:	4a8a      	ldr	r2, [pc, #552]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80005d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005de:	4619      	mov	r1, r3
 80005e0:	4888      	ldr	r0, [pc, #544]	@ (8000804 <LED_RGB_Cycle+0x244>)
 80005e2:	f004 fbcf 	bl	8004d84 <HAL_TIM_PWM_Start>
	for (int i = 0; i < 3; i++) {
 80005e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005e8:	3301      	adds	r3, #1
 80005ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	ddf1      	ble.n	80005d6 <LED_RGB_Cycle+0x16>
    }
	playBuzzerTone(100);
 80005f2:	2064      	movs	r0, #100	@ 0x64
 80005f4:	f7ff ff98 	bl	8000528 <playBuzzerTone>

	const int RED = 0, GREEN = 1, BLUE = 2;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]

	// Full RGB effect
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
 8000608:	e0b8      	b.n	800077c <LED_RGB_Cycle+0x1bc>
		// Red to Yellow (Red + Green)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 800060a:	4a7d      	ldr	r2, [pc, #500]	@ (8000800 <LED_RGB_Cycle+0x240>)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d104      	bne.n	8000620 <LED_RGB_Cycle+0x60>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
 800061e:	e02f      	b.n	8000680 <LED_RGB_Cycle+0xc0>
 8000620:	4a77      	ldr	r2, [pc, #476]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d104      	bne.n	8000636 <LED_RGB_Cycle+0x76>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000632:	6393      	str	r3, [r2, #56]	@ 0x38
 8000634:	e024      	b.n	8000680 <LED_RGB_Cycle+0xc0>
 8000636:	4a72      	ldr	r2, [pc, #456]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063e:	2b08      	cmp	r3, #8
 8000640:	d104      	bne.n	800064c <LED_RGB_Cycle+0x8c>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000648:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800064a:	e019      	b.n	8000680 <LED_RGB_Cycle+0xc0>
 800064c:	4a6c      	ldr	r2, [pc, #432]	@ (8000800 <LED_RGB_Cycle+0x240>)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	2b0c      	cmp	r3, #12
 8000656:	d104      	bne.n	8000662 <LED_RGB_Cycle+0xa2>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	e00e      	b.n	8000680 <LED_RGB_Cycle+0xc0>
 8000662:	4a67      	ldr	r2, [pc, #412]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	2b10      	cmp	r3, #16
 800066c:	d104      	bne.n	8000678 <LED_RGB_Cycle+0xb8>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000674:	6593      	str	r3, [r2, #88]	@ 0x58
 8000676:	e003      	b.n	8000680 <LED_RGB_Cycle+0xc0>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], dutyCycle);
 8000680:	4a5f      	ldr	r2, [pc, #380]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <LED_RGB_Cycle+0xd6>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000692:	635a      	str	r2, [r3, #52]	@ 0x34
 8000694:	e02f      	b.n	80006f6 <LED_RGB_Cycle+0x136>
 8000696:	4a5a      	ldr	r2, [pc, #360]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	2b04      	cmp	r3, #4
 80006a0:	d104      	bne.n	80006ac <LED_RGB_Cycle+0xec>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80006aa:	e024      	b.n	80006f6 <LED_RGB_Cycle+0x136>
 80006ac:	4a54      	ldr	r2, [pc, #336]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d104      	bne.n	80006c2 <LED_RGB_Cycle+0x102>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006c0:	e019      	b.n	80006f6 <LED_RGB_Cycle+0x136>
 80006c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	2b0c      	cmp	r3, #12
 80006cc:	d104      	bne.n	80006d8 <LED_RGB_Cycle+0x118>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d6:	e00e      	b.n	80006f6 <LED_RGB_Cycle+0x136>
 80006d8:	4a49      	ldr	r2, [pc, #292]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	2b10      	cmp	r3, #16
 80006e2:	d104      	bne.n	80006ee <LED_RGB_Cycle+0x12e>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ec:	e003      	b.n	80006f6 <LED_RGB_Cycle+0x136>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006f4:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 0);
 80006f6:	4a42      	ldr	r2, [pc, #264]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d104      	bne.n	800070c <LED_RGB_Cycle+0x14c>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	635a      	str	r2, [r3, #52]	@ 0x34
 800070a:	e02f      	b.n	800076c <LED_RGB_Cycle+0x1ac>
 800070c:	4a3c      	ldr	r2, [pc, #240]	@ (8000800 <LED_RGB_Cycle+0x240>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	2b04      	cmp	r3, #4
 8000716:	d104      	bne.n	8000722 <LED_RGB_Cycle+0x162>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	2300      	movs	r3, #0
 800071e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000720:	e024      	b.n	800076c <LED_RGB_Cycle+0x1ac>
 8000722:	4a37      	ldr	r2, [pc, #220]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800072a:	2b08      	cmp	r3, #8
 800072c:	d104      	bne.n	8000738 <LED_RGB_Cycle+0x178>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000736:	e019      	b.n	800076c <LED_RGB_Cycle+0x1ac>
 8000738:	4a31      	ldr	r2, [pc, #196]	@ (8000800 <LED_RGB_Cycle+0x240>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	2b0c      	cmp	r3, #12
 8000742:	d104      	bne.n	800074e <LED_RGB_Cycle+0x18e>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	e00e      	b.n	800076c <LED_RGB_Cycle+0x1ac>
 800074e:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	2b10      	cmp	r3, #16
 8000758:	d104      	bne.n	8000764 <LED_RGB_Cycle+0x1a4>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	2300      	movs	r3, #0
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	e003      	b.n	800076c <LED_RGB_Cycle+0x1ac>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 800076c:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <LED_RGB_Cycle+0x248>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fd55 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000778:	3301      	adds	r3, #1
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
 800077c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800077e:	2b64      	cmp	r3, #100	@ 0x64
 8000780:	f77f af43 	ble.w	800060a <LED_RGB_Cycle+0x4a>
	}
	playBuzzerTone(100);
 8000784:	2064      	movs	r0, #100	@ 0x64
 8000786:	f7ff fecf 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800078e:	e0bf      	b.n	8000910 <LED_RGB_Cycle+0x350>
		// Yellow to Green
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <LED_RGB_Cycle+0x240>)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d104      	bne.n	80007a6 <LED_RGB_Cycle+0x1e6>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a4:	e036      	b.n	8000814 <LED_RGB_Cycle+0x254>
 80007a6:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d104      	bne.n	80007bc <LED_RGB_Cycle+0x1fc>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	6393      	str	r3, [r2, #56]	@ 0x38
 80007ba:	e02b      	b.n	8000814 <LED_RGB_Cycle+0x254>
 80007bc:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d104      	bne.n	80007d2 <LED_RGB_Cycle+0x212>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007d0:	e020      	b.n	8000814 <LED_RGB_Cycle+0x254>
 80007d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d104      	bne.n	80007e8 <LED_RGB_Cycle+0x228>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e6:	e015      	b.n	8000814 <LED_RGB_Cycle+0x254>
 80007e8:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <LED_RGB_Cycle+0x240>)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d10b      	bne.n	800080c <LED_RGB_Cycle+0x24c>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80007fc:	e00a      	b.n	8000814 <LED_RGB_Cycle+0x254>
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	200002b0 	.word	0x200002b0
 8000808:	20000000 	.word	0x20000000
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000812:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 100);
 8000814:	4a8f      	ldr	r2, [pc, #572]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d104      	bne.n	800082a <LED_RGB_Cycle+0x26a>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	635a      	str	r2, [r3, #52]	@ 0x34
 8000828:	e02f      	b.n	800088a <LED_RGB_Cycle+0x2ca>
 800082a:	4a8a      	ldr	r2, [pc, #552]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	2b04      	cmp	r3, #4
 8000834:	d104      	bne.n	8000840 <LED_RGB_Cycle+0x280>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	2364      	movs	r3, #100	@ 0x64
 800083c:	6393      	str	r3, [r2, #56]	@ 0x38
 800083e:	e024      	b.n	800088a <LED_RGB_Cycle+0x2ca>
 8000840:	4a84      	ldr	r2, [pc, #528]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	2b08      	cmp	r3, #8
 800084a:	d104      	bne.n	8000856 <LED_RGB_Cycle+0x296>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	2364      	movs	r3, #100	@ 0x64
 8000852:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000854:	e019      	b.n	800088a <LED_RGB_Cycle+0x2ca>
 8000856:	4a7f      	ldr	r2, [pc, #508]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	2b0c      	cmp	r3, #12
 8000860:	d104      	bne.n	800086c <LED_RGB_Cycle+0x2ac>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	2364      	movs	r3, #100	@ 0x64
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	e00e      	b.n	800088a <LED_RGB_Cycle+0x2ca>
 800086c:	4a79      	ldr	r2, [pc, #484]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000874:	2b10      	cmp	r3, #16
 8000876:	d104      	bne.n	8000882 <LED_RGB_Cycle+0x2c2>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2364      	movs	r3, #100	@ 0x64
 800087e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000880:	e003      	b.n	800088a <LED_RGB_Cycle+0x2ca>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 0);
 800088a:	4a72      	ldr	r2, [pc, #456]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d104      	bne.n	80008a0 <LED_RGB_Cycle+0x2e0>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
 800089e:	e02f      	b.n	8000900 <LED_RGB_Cycle+0x340>
 80008a0:	4a6c      	ldr	r2, [pc, #432]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d104      	bne.n	80008b6 <LED_RGB_Cycle+0x2f6>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	2300      	movs	r3, #0
 80008b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80008b4:	e024      	b.n	8000900 <LED_RGB_Cycle+0x340>
 80008b6:	4a67      	ldr	r2, [pc, #412]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	2b08      	cmp	r3, #8
 80008c0:	d104      	bne.n	80008cc <LED_RGB_Cycle+0x30c>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008ca:	e019      	b.n	8000900 <LED_RGB_Cycle+0x340>
 80008cc:	4a61      	ldr	r2, [pc, #388]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	2b0c      	cmp	r3, #12
 80008d6:	d104      	bne.n	80008e2 <LED_RGB_Cycle+0x322>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	e00e      	b.n	8000900 <LED_RGB_Cycle+0x340>
 80008e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	2b10      	cmp	r3, #16
 80008ec:	d104      	bne.n	80008f8 <LED_RGB_Cycle+0x338>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f6:	e003      	b.n	8000900 <LED_RGB_Cycle+0x340>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000900:	4b55      	ldr	r3, [pc, #340]	@ (8000a58 <LED_RGB_Cycle+0x498>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fc8b 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	3b01      	subs	r3, #1
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000912:	2b00      	cmp	r3, #0
 8000914:	f6bf af3c 	bge.w	8000790 <LED_RGB_Cycle+0x1d0>
	}
	playBuzzerTone(100);
 8000918:	2064      	movs	r0, #100	@ 0x64
 800091a:	f7ff fe05 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000922:	e0bd      	b.n	8000aa0 <LED_RGB_Cycle+0x4e0>
		// Green to Cyan (Green + Blue)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 0);
 8000924:	4a4b      	ldr	r2, [pc, #300]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <LED_RGB_Cycle+0x37a>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2200      	movs	r2, #0
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
 8000938:	e02f      	b.n	800099a <LED_RGB_Cycle+0x3da>
 800093a:	4a46      	ldr	r2, [pc, #280]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d104      	bne.n	8000950 <LED_RGB_Cycle+0x390>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	6393      	str	r3, [r2, #56]	@ 0x38
 800094e:	e024      	b.n	800099a <LED_RGB_Cycle+0x3da>
 8000950:	4a40      	ldr	r2, [pc, #256]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d104      	bne.n	8000966 <LED_RGB_Cycle+0x3a6>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000964:	e019      	b.n	800099a <LED_RGB_Cycle+0x3da>
 8000966:	4a3b      	ldr	r2, [pc, #236]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	2b0c      	cmp	r3, #12
 8000970:	d104      	bne.n	800097c <LED_RGB_Cycle+0x3bc>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	2300      	movs	r3, #0
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	e00e      	b.n	800099a <LED_RGB_Cycle+0x3da>
 800097c:	4a35      	ldr	r2, [pc, #212]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2b10      	cmp	r3, #16
 8000986:	d104      	bne.n	8000992 <LED_RGB_Cycle+0x3d2>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000990:	e003      	b.n	800099a <LED_RGB_Cycle+0x3da>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 100);
 800099a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d104      	bne.n	80009b0 <LED_RGB_Cycle+0x3f0>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2264      	movs	r2, #100	@ 0x64
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ae:	e02f      	b.n	8000a10 <LED_RGB_Cycle+0x450>
 80009b0:	4a28      	ldr	r2, [pc, #160]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d104      	bne.n	80009c6 <LED_RGB_Cycle+0x406>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	6393      	str	r3, [r2, #56]	@ 0x38
 80009c4:	e024      	b.n	8000a10 <LED_RGB_Cycle+0x450>
 80009c6:	4a23      	ldr	r2, [pc, #140]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d104      	bne.n	80009dc <LED_RGB_Cycle+0x41c>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	2364      	movs	r3, #100	@ 0x64
 80009d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009da:	e019      	b.n	8000a10 <LED_RGB_Cycle+0x450>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	2b0c      	cmp	r3, #12
 80009e6:	d104      	bne.n	80009f2 <LED_RGB_Cycle+0x432>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2364      	movs	r3, #100	@ 0x64
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	e00e      	b.n	8000a10 <LED_RGB_Cycle+0x450>
 80009f2:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	2b10      	cmp	r3, #16
 80009fc:	d104      	bne.n	8000a08 <LED_RGB_Cycle+0x448>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	2364      	movs	r3, #100	@ 0x64
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	e003      	b.n	8000a10 <LED_RGB_Cycle+0x450>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	2364      	movs	r3, #100	@ 0x64
 8000a0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], dutyCycle);
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d104      	bne.n	8000a26 <LED_RGB_Cycle+0x466>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a22:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a24:	e034      	b.n	8000a90 <LED_RGB_Cycle+0x4d0>
 8000a26:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d104      	bne.n	8000a3c <LED_RGB_Cycle+0x47c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a38:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a3a:	e029      	b.n	8000a90 <LED_RGB_Cycle+0x4d0>
 8000a3c:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <LED_RGB_Cycle+0x494>)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d109      	bne.n	8000a5c <LED_RGB_Cycle+0x49c>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000a50:	e01e      	b.n	8000a90 <LED_RGB_Cycle+0x4d0>
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	4a8d      	ldr	r2, [pc, #564]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d104      	bne.n	8000a72 <LED_RGB_Cycle+0x4b2>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	e00e      	b.n	8000a90 <LED_RGB_Cycle+0x4d0>
 8000a72:	4a88      	ldr	r2, [pc, #544]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d104      	bne.n	8000a88 <LED_RGB_Cycle+0x4c8>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a86:	e003      	b.n	8000a90 <LED_RGB_Cycle+0x4d0>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a8e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000a90:	4b81      	ldr	r3, [pc, #516]	@ (8000c98 <LED_RGB_Cycle+0x6d8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fbc3 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa2:	2b64      	cmp	r3, #100	@ 0x64
 8000aa4:	f77f af3e 	ble.w	8000924 <LED_RGB_Cycle+0x364>
	}
	playBuzzerTone(100);
 8000aa8:	2064      	movs	r0, #100	@ 0x64
 8000aaa:	f7ff fd3d 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab2:	e0b8      	b.n	8000c26 <LED_RGB_Cycle+0x666>
		// Cyan to Blue
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 0);
 8000ab4:	4a77      	ldr	r2, [pc, #476]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <LED_RGB_Cycle+0x50a>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac8:	e02f      	b.n	8000b2a <LED_RGB_Cycle+0x56a>
 8000aca:	4a72      	ldr	r2, [pc, #456]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d104      	bne.n	8000ae0 <LED_RGB_Cycle+0x520>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	2300      	movs	r3, #0
 8000adc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ade:	e024      	b.n	8000b2a <LED_RGB_Cycle+0x56a>
 8000ae0:	4a6c      	ldr	r2, [pc, #432]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d104      	bne.n	8000af6 <LED_RGB_Cycle+0x536>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2300      	movs	r3, #0
 8000af2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000af4:	e019      	b.n	8000b2a <LED_RGB_Cycle+0x56a>
 8000af6:	4a67      	ldr	r2, [pc, #412]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	2b0c      	cmp	r3, #12
 8000b00:	d104      	bne.n	8000b0c <LED_RGB_Cycle+0x54c>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	2300      	movs	r3, #0
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	e00e      	b.n	8000b2a <LED_RGB_Cycle+0x56a>
 8000b0c:	4a61      	ldr	r2, [pc, #388]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d104      	bne.n	8000b22 <LED_RGB_Cycle+0x562>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b20:	e003      	b.n	8000b2a <LED_RGB_Cycle+0x56a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], dutyCycle);
 8000b2a:	4a5a      	ldr	r2, [pc, #360]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <LED_RGB_Cycle+0x580>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b3e:	e02f      	b.n	8000ba0 <LED_RGB_Cycle+0x5e0>
 8000b40:	4a54      	ldr	r2, [pc, #336]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	d104      	bne.n	8000b56 <LED_RGB_Cycle+0x596>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b54:	e024      	b.n	8000ba0 <LED_RGB_Cycle+0x5e0>
 8000b56:	4a4f      	ldr	r2, [pc, #316]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d104      	bne.n	8000b6c <LED_RGB_Cycle+0x5ac>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b6a:	e019      	b.n	8000ba0 <LED_RGB_Cycle+0x5e0>
 8000b6c:	4a49      	ldr	r2, [pc, #292]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	2b0c      	cmp	r3, #12
 8000b76:	d104      	bne.n	8000b82 <LED_RGB_Cycle+0x5c2>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	e00e      	b.n	8000ba0 <LED_RGB_Cycle+0x5e0>
 8000b82:	4a44      	ldr	r2, [pc, #272]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8a:	2b10      	cmp	r3, #16
 8000b8c:	d104      	bne.n	8000b98 <LED_RGB_Cycle+0x5d8>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b96:	e003      	b.n	8000ba0 <LED_RGB_Cycle+0x5e0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 100);
 8000ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <LED_RGB_Cycle+0x5f6>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2264      	movs	r2, #100	@ 0x64
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb4:	e02f      	b.n	8000c16 <LED_RGB_Cycle+0x656>
 8000bb6:	4a37      	ldr	r2, [pc, #220]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d104      	bne.n	8000bcc <LED_RGB_Cycle+0x60c>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	2364      	movs	r3, #100	@ 0x64
 8000bc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bca:	e024      	b.n	8000c16 <LED_RGB_Cycle+0x656>
 8000bcc:	4a31      	ldr	r2, [pc, #196]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	2b08      	cmp	r3, #8
 8000bd6:	d104      	bne.n	8000be2 <LED_RGB_Cycle+0x622>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2364      	movs	r3, #100	@ 0x64
 8000bde:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000be0:	e019      	b.n	8000c16 <LED_RGB_Cycle+0x656>
 8000be2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	2b0c      	cmp	r3, #12
 8000bec:	d104      	bne.n	8000bf8 <LED_RGB_Cycle+0x638>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	2364      	movs	r3, #100	@ 0x64
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	e00e      	b.n	8000c16 <LED_RGB_Cycle+0x656>
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	2b10      	cmp	r3, #16
 8000c02:	d104      	bne.n	8000c0e <LED_RGB_Cycle+0x64e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	2364      	movs	r3, #100	@ 0x64
 8000c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0c:	e003      	b.n	8000c16 <LED_RGB_Cycle+0x656>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	2364      	movs	r3, #100	@ 0x64
 8000c14:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <LED_RGB_Cycle+0x6d8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fb00 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c22:	3b01      	subs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f6bf af43 	bge.w	8000ab4 <LED_RGB_Cycle+0x4f4>
	}
	playBuzzerTone(100);
 8000c2e:	2064      	movs	r0, #100	@ 0x64
 8000c30:	f7ff fc7a 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	e0bd      	b.n	8000db6 <LED_RGB_Cycle+0x7f6>
		// Blue to Magenta (Blue + Red)
		__HAL_TIM_SET_COMPARE(htim, channels[RED], dutyCycle);
 8000c3a:	4a16      	ldr	r2, [pc, #88]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d104      	bne.n	8000c50 <LED_RGB_Cycle+0x690>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a3a      	ldr	r2, [r7, #32]
 8000c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c4e:	e034      	b.n	8000cba <LED_RGB_Cycle+0x6fa>
 8000c50:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d104      	bne.n	8000c66 <LED_RGB_Cycle+0x6a6>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c64:	e029      	b.n	8000cba <LED_RGB_Cycle+0x6fa>
 8000c66:	4a0b      	ldr	r2, [pc, #44]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d104      	bne.n	8000c7c <LED_RGB_Cycle+0x6bc>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c7a:	e01e      	b.n	8000cba <LED_RGB_Cycle+0x6fa>
 8000c7c:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <LED_RGB_Cycle+0x6d4>)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	2b0c      	cmp	r3, #12
 8000c86:	d109      	bne.n	8000c9c <LED_RGB_Cycle+0x6dc>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	e013      	b.n	8000cba <LED_RGB_Cycle+0x6fa>
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	4a91      	ldr	r2, [pc, #580]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	2b10      	cmp	r3, #16
 8000ca6:	d104      	bne.n	8000cb2 <LED_RGB_Cycle+0x6f2>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb0:	e003      	b.n	8000cba <LED_RGB_Cycle+0x6fa>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 0);
 8000cba:	4a8a      	ldr	r2, [pc, #552]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <LED_RGB_Cycle+0x710>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cce:	e02f      	b.n	8000d30 <LED_RGB_Cycle+0x770>
 8000cd0:	4a84      	ldr	r2, [pc, #528]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d104      	bne.n	8000ce6 <LED_RGB_Cycle+0x726>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ce4:	e024      	b.n	8000d30 <LED_RGB_Cycle+0x770>
 8000ce6:	4a7f      	ldr	r2, [pc, #508]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d104      	bne.n	8000cfc <LED_RGB_Cycle+0x73c>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cfa:	e019      	b.n	8000d30 <LED_RGB_Cycle+0x770>
 8000cfc:	4a79      	ldr	r2, [pc, #484]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	2b0c      	cmp	r3, #12
 8000d06:	d104      	bne.n	8000d12 <LED_RGB_Cycle+0x752>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	e00e      	b.n	8000d30 <LED_RGB_Cycle+0x770>
 8000d12:	4a74      	ldr	r2, [pc, #464]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d104      	bne.n	8000d28 <LED_RGB_Cycle+0x768>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d26:	e003      	b.n	8000d30 <LED_RGB_Cycle+0x770>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], 100);
 8000d30:	4a6c      	ldr	r2, [pc, #432]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <LED_RGB_Cycle+0x786>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2264      	movs	r2, #100	@ 0x64
 8000d42:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d44:	e02f      	b.n	8000da6 <LED_RGB_Cycle+0x7e6>
 8000d46:	4a67      	ldr	r2, [pc, #412]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d104      	bne.n	8000d5c <LED_RGB_Cycle+0x79c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	2364      	movs	r3, #100	@ 0x64
 8000d58:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d5a:	e024      	b.n	8000da6 <LED_RGB_Cycle+0x7e6>
 8000d5c:	4a61      	ldr	r2, [pc, #388]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d104      	bne.n	8000d72 <LED_RGB_Cycle+0x7b2>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2364      	movs	r3, #100	@ 0x64
 8000d6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d70:	e019      	b.n	8000da6 <LED_RGB_Cycle+0x7e6>
 8000d72:	4a5c      	ldr	r2, [pc, #368]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	2b0c      	cmp	r3, #12
 8000d7c:	d104      	bne.n	8000d88 <LED_RGB_Cycle+0x7c8>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	2364      	movs	r3, #100	@ 0x64
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	e00e      	b.n	8000da6 <LED_RGB_Cycle+0x7e6>
 8000d88:	4a56      	ldr	r2, [pc, #344]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	2b10      	cmp	r3, #16
 8000d92:	d104      	bne.n	8000d9e <LED_RGB_Cycle+0x7de>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2364      	movs	r3, #100	@ 0x64
 8000d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9c:	e003      	b.n	8000da6 <LED_RGB_Cycle+0x7e6>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	2364      	movs	r3, #100	@ 0x64
 8000da4:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000da6:	4b50      	ldr	r3, [pc, #320]	@ (8000ee8 <LED_RGB_Cycle+0x928>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fa38 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 0; dutyCycle <= 100; dutyCycle++) {
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	3301      	adds	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	6a3b      	ldr	r3, [r7, #32]
 8000db8:	2b64      	cmp	r3, #100	@ 0x64
 8000dba:	f77f af3e 	ble.w	8000c3a <LED_RGB_Cycle+0x67a>
	}
	playBuzzerTone(100);
 8000dbe:	2064      	movs	r0, #100	@ 0x64
 8000dc0:	f7ff fbb2 	bl	8000528 <playBuzzerTone>

	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000dc4:	2364      	movs	r3, #100	@ 0x64
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	e0bd      	b.n	8000f46 <LED_RGB_Cycle+0x986>
		// Magenta to Red
		__HAL_TIM_SET_COMPARE(htim, channels[RED], 100);
 8000dca:	4a46      	ldr	r2, [pc, #280]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <LED_RGB_Cycle+0x820>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2264      	movs	r2, #100	@ 0x64
 8000ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dde:	e02f      	b.n	8000e40 <LED_RGB_Cycle+0x880>
 8000de0:	4a40      	ldr	r2, [pc, #256]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d104      	bne.n	8000df6 <LED_RGB_Cycle+0x836>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2364      	movs	r3, #100	@ 0x64
 8000df2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000df4:	e024      	b.n	8000e40 <LED_RGB_Cycle+0x880>
 8000df6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d104      	bne.n	8000e0c <LED_RGB_Cycle+0x84c>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2364      	movs	r3, #100	@ 0x64
 8000e08:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e0a:	e019      	b.n	8000e40 <LED_RGB_Cycle+0x880>
 8000e0c:	4a35      	ldr	r2, [pc, #212]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d104      	bne.n	8000e22 <LED_RGB_Cycle+0x862>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	e00e      	b.n	8000e40 <LED_RGB_Cycle+0x880>
 8000e22:	4a30      	ldr	r2, [pc, #192]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d104      	bne.n	8000e38 <LED_RGB_Cycle+0x878>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2364      	movs	r3, #100	@ 0x64
 8000e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e36:	e003      	b.n	8000e40 <LED_RGB_Cycle+0x880>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2364      	movs	r3, #100	@ 0x64
 8000e3e:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[GREEN], 0);
 8000e40:	4a28      	ldr	r2, [pc, #160]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d104      	bne.n	8000e56 <LED_RGB_Cycle+0x896>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e54:	e02f      	b.n	8000eb6 <LED_RGB_Cycle+0x8f6>
 8000e56:	4a23      	ldr	r2, [pc, #140]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d104      	bne.n	8000e6c <LED_RGB_Cycle+0x8ac>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e6a:	e024      	b.n	8000eb6 <LED_RGB_Cycle+0x8f6>
 8000e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d104      	bne.n	8000e82 <LED_RGB_Cycle+0x8c2>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e80:	e019      	b.n	8000eb6 <LED_RGB_Cycle+0x8f6>
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	d104      	bne.n	8000e98 <LED_RGB_Cycle+0x8d8>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	e00e      	b.n	8000eb6 <LED_RGB_Cycle+0x8f6>
 8000e98:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	2b10      	cmp	r3, #16
 8000ea2:	d104      	bne.n	8000eae <LED_RGB_Cycle+0x8ee>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eac:	e003      	b.n	8000eb6 <LED_RGB_Cycle+0x8f6>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim, channels[BLUE], dutyCycle);
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d104      	bne.n	8000ecc <LED_RGB_Cycle+0x90c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eca:	e034      	b.n	8000f36 <LED_RGB_Cycle+0x976>
 8000ecc:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <LED_RGB_Cycle+0x924>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d109      	bne.n	8000eec <LED_RGB_Cycle+0x92c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ee0:	e029      	b.n	8000f36 <LED_RGB_Cycle+0x976>
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <LED_RGB_Cycle+0x9c8>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d104      	bne.n	8000f02 <LED_RGB_Cycle+0x942>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f00:	e019      	b.n	8000f36 <LED_RGB_Cycle+0x976>
 8000f02:	4a21      	ldr	r2, [pc, #132]	@ (8000f88 <LED_RGB_Cycle+0x9c8>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d104      	bne.n	8000f18 <LED_RGB_Cycle+0x958>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	e00e      	b.n	8000f36 <LED_RGB_Cycle+0x976>
 8000f18:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <LED_RGB_Cycle+0x9c8>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	d104      	bne.n	8000f2e <LED_RGB_Cycle+0x96e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2c:	e003      	b.n	8000f36 <LED_RGB_Cycle+0x976>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	65d3      	str	r3, [r2, #92]	@ 0x5c
		HAL_Delay(cycleDelay);
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <LED_RGB_Cycle+0x9cc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f970 	bl	8002220 <HAL_Delay>
	for (int dutyCycle = 100; dutyCycle >= 0; dutyCycle--) {
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f6bf af3e 	bge.w	8000dca <LED_RGB_Cycle+0x80a>
	}
	playBuzzerTone(100);
 8000f4e:	2064      	movs	r0, #100	@ 0x64
 8000f50:	f7ff faea 	bl	8000528 <playBuzzerTone>

	for (int i = 0; i < 3; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	e00a      	b.n	8000f70 <LED_RGB_Cycle+0x9b0>
	  HAL_TIM_PWM_Stop(&htim3, channels[i]);
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <LED_RGB_Cycle+0x9c8>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	4619      	mov	r1, r3
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <LED_RGB_Cycle+0x9d0>)
 8000f66:	f004 f807 	bl	8004f78 <HAL_TIM_PWM_Stop>
	for (int i = 0; i < 3; i++) {
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	ddf1      	ble.n	8000f5a <LED_RGB_Cycle+0x99a>
    }

	playBuzzerTone(500);
 8000f76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f7a:	f7ff fad5 	bl	8000528 <playBuzzerTone>
}
 8000f7e:	bf00      	nop
 8000f80:	3738      	adds	r7, #56	@ 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	200002b0 	.word	0x200002b0

08000f94 <start_up>:

void start_up(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	f001 f940 	bl	8002220 <HAL_Delay>

	for(int j = 0; j < 9; j++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e034      	b.n	8001010 <start_up+0x7c>

		for (int i = 0; i < 4; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	e016      	b.n	8000fda <start_up+0x46>
			HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (START_SEQ[j] >> i) & 0x01);
 8000fac:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <start_up+0x90>)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <start_up+0x94>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	fa42 f303 	asr.w	r3, r2, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4817      	ldr	r0, [pc, #92]	@ (800102c <start_up+0x98>)
 8000fd0:	f002 fb70 	bl	80036b4 <HAL_GPIO_WritePin>
		for (int i = 0; i < 4; i++) {
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	dde5      	ble.n	8000fac <start_up+0x18>
		}

		HAL_Delay(5);
 8000fe0:	2005      	movs	r0, #5
 8000fe2:	f001 f91d 	bl	8002220 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fec:	4810      	ldr	r0, [pc, #64]	@ (8001030 <start_up+0x9c>)
 8000fee:	f002 fb61 	bl	80036b4 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8000ff2:	2005      	movs	r0, #5
 8000ff4:	f001 f914 	bl	8002220 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ffe:	480c      	ldr	r0, [pc, #48]	@ (8001030 <start_up+0x9c>)
 8001000:	f002 fb58 	bl	80036b4 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001004:	2005      	movs	r0, #5
 8001006:	f001 f90b 	bl	8002220 <HAL_Delay>
	for(int j = 0; j < 9; j++){
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3301      	adds	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b08      	cmp	r3, #8
 8001014:	ddc7      	ble.n	8000fa6 <start_up+0x12>

	}

	line = 0;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <start_up+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08006d30 	.word	0x08006d30
 8001028:	08006d48 	.word	0x08006d48
 800102c:	40021000 	.word	0x40021000
 8001030:	40020c00 	.word	0x40020c00
 8001034:	2000017c 	.word	0x2000017c

08001038 <text_to_disp>:

void text_to_disp(char* str) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    while (*str != '\0') {
 8001040:	e011      	b.n	8001066 <text_to_disp+0x2e>

        uint8_t highNibble = (*str >> 4) & 0x0F;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	73fb      	strb	r3, [r7, #15]
        uint8_t lowNibble = *str & 0x0F;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	73bb      	strb	r3, [r7, #14]

        get_digit_and_write_to_disp(highNibble, lowNibble);
 8001054:	7bba      	ldrb	r2, [r7, #14]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f884 	bl	8001168 <get_digit_and_write_to_disp>

        str++;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
    while (*str != '\0') {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1e9      	bne.n	8001042 <text_to_disp+0xa>
    }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <bottom_row>:


void bottom_row(){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

	for(int j = 0; j < 2; j++){
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e05f      	b.n	8001144 <bottom_row+0xcc>

		if (line == 0){
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <bottom_row+0xdc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11f      	bne.n	80010cc <bottom_row+0x54>
			for (int i = 0; i < 4; i++) {
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	e016      	b.n	80010c0 <bottom_row+0x48>
				HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (BOTTOM_ROW[j] >> i) & 0x01);
 8001092:	4a31      	ldr	r2, [pc, #196]	@ (8001158 <bottom_row+0xe0>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800109a:	4a30      	ldr	r2, [pc, #192]	@ (800115c <bottom_row+0xe4>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	fa42 f303 	asr.w	r3, r2, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	482a      	ldr	r0, [pc, #168]	@ (8001160 <bottom_row+0xe8>)
 80010b6:	f002 fafd 	bl	80036b4 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	3301      	adds	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	dde5      	ble.n	8001092 <bottom_row+0x1a>
			}

			line = 1;
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <bottom_row+0xdc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
		}

		if (line == 1){
 80010cc:	4b21      	ldr	r3, [pc, #132]	@ (8001154 <bottom_row+0xdc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d11f      	bne.n	8001114 <bottom_row+0x9c>
			for (int i = 0; i < 4; i++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	e016      	b.n	8001108 <bottom_row+0x90>
				HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (BOTTOM_ROW[j+2] >> i) & 0x01);
 80010da:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <bottom_row+0xe0>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3302      	adds	r3, #2
 80010e6:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <bottom_row+0xe4>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	fa42 f303 	asr.w	r3, r2, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	4818      	ldr	r0, [pc, #96]	@ (8001160 <bottom_row+0xe8>)
 80010fe:	f002 fad9 	bl	80036b4 <HAL_GPIO_WritePin>
			for (int i = 0; i < 4; i++) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b03      	cmp	r3, #3
 800110c:	dde5      	ble.n	80010da <bottom_row+0x62>
			}

			line = 0;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <bottom_row+0xdc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(5);
 8001114:	2005      	movs	r0, #5
 8001116:	f001 f883 	bl	8002220 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001120:	4810      	ldr	r0, [pc, #64]	@ (8001164 <bottom_row+0xec>)
 8001122:	f002 fac7 	bl	80036b4 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001126:	2005      	movs	r0, #5
 8001128:	f001 f87a 	bl	8002220 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001132:	480c      	ldr	r0, [pc, #48]	@ (8001164 <bottom_row+0xec>)
 8001134:	f002 fabe 	bl	80036b4 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001138:	2005      	movs	r0, #5
 800113a:	f001 f871 	bl	8002220 <HAL_Delay>
	for(int j = 0; j < 2; j++){
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	dd9c      	ble.n	8001084 <bottom_row+0xc>
	}
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000017c 	.word	0x2000017c
 8001158:	08006d30 	.word	0x08006d30
 800115c:	08006d54 	.word	0x08006d54
 8001160:	40021000 	.word	0x40021000
 8001164:	40020c00 	.word	0x40020c00

08001168 <get_digit_and_write_to_disp>:


void get_digit_and_write_to_disp(uint8_t a, uint8_t b){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800117e:	4837      	ldr	r0, [pc, #220]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 8001180:	f002 fa98 	bl	80036b4 <HAL_GPIO_WritePin>

	for (int i = 0; i < 4; i++) {
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	e015      	b.n	80011b6 <get_digit_and_write_to_disp+0x4e>
		HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (HEX_TO_CHAR[a] >> i) & 0x01);
 800118a:	4a35      	ldr	r2, [pc, #212]	@ (8001260 <get_digit_and_write_to_disp+0xf8>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a33      	ldr	r2, [pc, #204]	@ (8001264 <get_digit_and_write_to_disp+0xfc>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	482f      	ldr	r0, [pc, #188]	@ (8001268 <get_digit_and_write_to_disp+0x100>)
 80011ac:	f002 fa82 	bl	80036b4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	dde6      	ble.n	800118a <get_digit_and_write_to_disp+0x22>
	}

	HAL_Delay(5);
 80011bc:	2005      	movs	r0, #5
 80011be:	f001 f82f 	bl	8002220 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c8:	4824      	ldr	r0, [pc, #144]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 80011ca:	f002 fa73 	bl	80036b4 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80011ce:	2005      	movs	r0, #5
 80011d0:	f001 f826 	bl	8002220 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011da:	4820      	ldr	r0, [pc, #128]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 80011dc:	f002 fa6a 	bl	80036b4 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 80011e0:	2005      	movs	r0, #5
 80011e2:	f001 f81d 	bl	8002220 <HAL_Delay>

	for (int i = 0; i < 4; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	e015      	b.n	8001218 <get_digit_and_write_to_disp+0xb0>
		HAL_GPIO_WritePin(LCD_PORT, LCD_PINS[i], (HEX_TO_CHAR[b] >> i) & 0x01);
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <get_digit_and_write_to_disp+0xf8>)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <get_digit_and_write_to_disp+0xfc>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	fa42 f303 	asr.w	r3, r2, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4816      	ldr	r0, [pc, #88]	@ (8001268 <get_digit_and_write_to_disp+0x100>)
 800120e:	f002 fa51 	bl	80036b4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b03      	cmp	r3, #3
 800121c:	dde6      	ble.n	80011ec <get_digit_and_write_to_disp+0x84>
	}

	HAL_Delay(5);
 800121e:	2005      	movs	r0, #5
 8001220:	f000 fffe 	bl	8002220 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 800122c:	f002 fa42 	bl	80036b4 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8001230:	2005      	movs	r0, #5
 8001232:	f000 fff5 	bl	8002220 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 800123e:	f002 fa39 	bl	80036b4 <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8001242:	2005      	movs	r0, #5
 8001244:	f000 ffec 	bl	8002220 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800124e:	4803      	ldr	r0, [pc, #12]	@ (800125c <get_digit_and_write_to_disp+0xf4>)
 8001250:	f002 fa30 	bl	80036b4 <HAL_GPIO_WritePin>

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020c00 	.word	0x40020c00
 8001260:	08006d30 	.word	0x08006d30
 8001264:	08006d38 	.word	0x08006d38
 8001268:	40021000 	.word	0x40021000

0800126c <motorStopped>:

void motorStopped(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOC, motorStopPin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001276:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <motorStopped+0x48>)
 8001278:	f002 fa1c 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, motorOutPin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001282:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <motorStopped+0x48>)
 8001284:	f002 fa16 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, ledPin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2110      	movs	r1, #16
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <motorStopped+0x4c>)
 800128e:	f002 fa11 	bl	80036b4 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001292:	2064      	movs	r0, #100	@ 0x64
 8001294:	f000 ffc4 	bl	8002220 <HAL_Delay>

    start_up();
 8001298:	f7ff fe7c 	bl	8000f94 <start_up>
    start_up();
 800129c:	f7ff fe7a 	bl	8000f94 <start_up>
    text_to_disp(" Motor Stopped! ");
 80012a0:	4806      	ldr	r0, [pc, #24]	@ (80012bc <motorStopped+0x50>)
 80012a2:	f7ff fec9 	bl	8001038 <text_to_disp>
    HAL_Delay(500);
 80012a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012aa:	f000 ffb9 	bl	8002220 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	08006cd0 	.word	0x08006cd0

080012c0 <motorRunningCCW>:

void motorRunningCCW(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, ledPin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2110      	movs	r1, #16
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <motorRunningCCW+0x50>)
 80012ca:	f002 f9f3 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, motorStopPin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012d4:	480f      	ldr	r0, [pc, #60]	@ (8001314 <motorRunningCCW+0x54>)
 80012d6:	f002 f9ed 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, motorOutPin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <motorRunningCCW+0x54>)
 80012e2:	f002 f9e7 	bl	80036b4 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80012e6:	2064      	movs	r0, #100	@ 0x64
 80012e8:	f000 ff9a 	bl	8002220 <HAL_Delay>

    start_up();
 80012ec:	f7ff fe52 	bl	8000f94 <start_up>
    start_up();
 80012f0:	f7ff fe50 	bl	8000f94 <start_up>
    text_to_disp("Motor is running");
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <motorRunningCCW+0x58>)
 80012f6:	f7ff fe9f 	bl	8001038 <text_to_disp>
    bottom_row();
 80012fa:	f7ff febd 	bl	8001078 <bottom_row>
    text_to_disp("CounterClockWise");
 80012fe:	4807      	ldr	r0, [pc, #28]	@ (800131c <motorRunningCCW+0x5c>)
 8001300:	f7ff fe9a 	bl	8001038 <text_to_disp>
    HAL_Delay(500);
 8001304:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001308:	f000 ff8a 	bl	8002220 <HAL_Delay>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	08006ce4 	.word	0x08006ce4
 800131c:	08006cf8 	.word	0x08006cf8

08001320 <motorRunningCW>:

void motorRunningCW(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOB, ledPin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2110      	movs	r1, #16
 8001328:	4811      	ldr	r0, [pc, #68]	@ (8001370 <motorRunningCW+0x50>)
 800132a:	f002 f9c3 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, motorStopPin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001334:	480f      	ldr	r0, [pc, #60]	@ (8001374 <motorRunningCW+0x54>)
 8001336:	f002 f9bd 	bl	80036b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, motorOutPin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <motorRunningCW+0x54>)
 8001342:	f002 f9b7 	bl	80036b4 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f000 ff6a 	bl	8002220 <HAL_Delay>

    start_up();
 800134c:	f7ff fe22 	bl	8000f94 <start_up>
    start_up();
 8001350:	f7ff fe20 	bl	8000f94 <start_up>
    text_to_disp("Motor is running");
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <motorRunningCW+0x58>)
 8001356:	f7ff fe6f 	bl	8001038 <text_to_disp>
    bottom_row();
 800135a:	f7ff fe8d 	bl	8001078 <bottom_row>
    text_to_disp("   Clock-Wise   ");
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <motorRunningCW+0x5c>)
 8001360:	f7ff fe6a 	bl	8001038 <text_to_disp>
    HAL_Delay(500);
 8001364:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001368:	f000 ff5a 	bl	8002220 <HAL_Delay>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	08006ce4 	.word	0x08006ce4
 800137c:	08006d0c 	.word	0x08006d0c

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 feee 	bl	8002166 <HAL_Init>

  /* USER CODE BEGIN Init */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin   = LCD_PINS[0] | LCD_PINS[1] | LCD_PINS[2] | LCD_PINS[3];
 8001398:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800139c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_PORT, &GPIO_InitStruct);
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4832      	ldr	r0, [pc, #200]	@ (8001490 <main+0x110>)
 80013c8:	f001 ffb0 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f86e 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f000 fab8 	bl	8001944 <MX_GPIO_Init>
  MX_ETH_Init();
 80013d4:	f000 f92e 	bl	8001634 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013d8:	f000 fa56 	bl	8001888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013dc:	f000 fa84 	bl	80018e8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80013e0:	f000 f8d6 	bl	8001590 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013e4:	f000 f974 	bl	80016d0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80013e8:	f000 fa00 	bl	80017ec <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  line = 0;
 80013ec:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <main+0x114>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	@ 0x64
 80013f4:	f000 ff14 	bl	8002220 <HAL_Delay>
  start_up();
 80013f8:	f7ff fdcc 	bl	8000f94 <start_up>
  text_to_disp("System Ready");
 80013fc:	4826      	ldr	r0, [pc, #152]	@ (8001498 <main+0x118>)
 80013fe:	f7ff fe1b 	bl	8001038 <text_to_disp>
  HAL_Delay(1000);
 8001402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001406:	f000 ff0b 	bl	8002220 <HAL_Delay>
  motorStopped();
 800140a:	f7ff ff2f 	bl	800126c <motorStopped>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GPIO_ReadPin(GPIOA, motorAlarmPin) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, motorStopPin) == GPIO_PIN_SET){
 800140e:	2108      	movs	r1, #8
 8001410:	4822      	ldr	r0, [pc, #136]	@ (800149c <main+0x11c>)
 8001412:	f002 f937 	bl	8003684 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d10e      	bne.n	800143a <main+0xba>
 800141c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <main+0x120>)
 8001422:	f002 f92f 	bl	8003684 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <main+0xba>
		LED_RGB_Cycle(&htim3);
 800142c:	481d      	ldr	r0, [pc, #116]	@ (80014a4 <main+0x124>)
 800142e:	f7ff f8c7 	bl	80005c0 <LED_RGB_Cycle>
		HAL_Delay(500);
 8001432:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001436:	f000 fef3 	bl	8002220 <HAL_Delay>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, motorStopTouchPin) == GPIO_PIN_SET){
 800143a:	2120      	movs	r1, #32
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <main+0x11c>)
 800143e:	f002 f921 	bl	8003684 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <main+0xd4>
		motorStopped();
 8001448:	f7ff ff10 	bl	800126c <motorStopped>
		HAL_Delay(500);
 800144c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001450:	f000 fee6 	bl	8002220 <HAL_Delay>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, motorPinCW) == GPIO_PIN_SET){
 8001454:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001458:	4813      	ldr	r0, [pc, #76]	@ (80014a8 <main+0x128>)
 800145a:	f002 f913 	bl	8003684 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <main+0xf0>
		motorRunningCW();
 8001464:	f7ff ff5c 	bl	8001320 <motorRunningCW>
		HAL_Delay(500);
 8001468:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800146c:	f000 fed8 	bl	8002220 <HAL_Delay>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, motorPinCCW) == GPIO_PIN_SET){
 8001470:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <main+0x128>)
 8001476:	f002 f905 	bl	8003684 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d1c6      	bne.n	800140e <main+0x8e>
		motorRunningCCW();
 8001480:	f7ff ff1e 	bl	80012c0 <motorRunningCCW>
		HAL_Delay(500);
 8001484:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001488:	f000 feca 	bl	8002220 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, motorAlarmPin) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, motorStopPin) == GPIO_PIN_SET){
 800148c:	e7bf      	b.n	800140e <main+0x8e>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	2000017c 	.word	0x2000017c
 8001498:	08006d20 	.word	0x08006d20
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020800 	.word	0x40020800
 80014a4:	200002b0 	.word	0x200002b0
 80014a8:	40020400 	.word	0x40020400

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	@ 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2234      	movs	r2, #52	@ 0x34
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f005 fbcf 	bl	8006c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014d0:	f002 fa44 	bl	800395c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <SystemClock_Config+0xdc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <SystemClock_Config+0xdc>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <SystemClock_Config+0xdc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <SystemClock_Config+0xe0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014f4:	4a25      	ldr	r2, [pc, #148]	@ (800158c <SystemClock_Config+0xe0>)
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <SystemClock_Config+0xe0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800150c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001510:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001520:	23d8      	movs	r3, #216	@ 0xd8
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001528:	2309      	movs	r3, #9
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152c:	2302      	movs	r3, #2
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fa71 	bl	8003a1c <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001540:	f000 fb18 	bl	8001b74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001544:	f002 fa1a 	bl	800397c <HAL_PWREx_EnableOverDrive>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800154e:	f000 fb11 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2302      	movs	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2103      	movs	r1, #3
 8001570:	4618      	mov	r0, r3
 8001572:	f002 fd01 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800157c:	f000 fafa 	bl	8001b74 <Error_Handler>
  }
}
 8001580:	bf00      	nop
 8001582:	3750      	adds	r7, #80	@ 0x50
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000

08001590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <MX_ADC1_Init+0x9c>)
 80015a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <MX_ADC1_Init+0xa0>)
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015dc:	2201      	movs	r2, #1
 80015de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ee:	480e      	ldr	r0, [pc, #56]	@ (8001628 <MX_ADC1_Init+0x98>)
 80015f0:	f000 fe3a 	bl	8002268 <HAL_ADC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 fabb 	bl	8001b74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015fe:	230a      	movs	r3, #10
 8001600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001602:	2301      	movs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_ADC1_Init+0x98>)
 8001610:	f001 f808 	bl	8002624 <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800161a:	f000 faab 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200001b8 	.word	0x200001b8
 800162c:	40012000 	.word	0x40012000
 8001630:	0f000001 	.word	0x0f000001

08001634 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_ETH_Init+0x84>)
 800163a:	4a20      	ldr	r2, [pc, #128]	@ (80016bc <MX_ETH_Init+0x88>)
 800163c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_ETH_Init+0x8c>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_ETH_Init+0x8c>)
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_ETH_Init+0x8c>)
 800164c:	22e1      	movs	r2, #225	@ 0xe1
 800164e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_ETH_Init+0x8c>)
 8001652:	2200      	movs	r2, #0
 8001654:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_ETH_Init+0x8c>)
 8001658:	2200      	movs	r2, #0
 800165a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_ETH_Init+0x8c>)
 800165e:	2200      	movs	r2, #0
 8001660:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_ETH_Init+0x84>)
 8001664:	4a16      	ldr	r2, [pc, #88]	@ (80016c0 <MX_ETH_Init+0x8c>)
 8001666:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <MX_ETH_Init+0x84>)
 800166a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800166e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_ETH_Init+0x84>)
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <MX_ETH_Init+0x90>)
 8001674:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_ETH_Init+0x84>)
 8001678:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <MX_ETH_Init+0x94>)
 800167a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_ETH_Init+0x84>)
 800167e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001682:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <MX_ETH_Init+0x84>)
 8001686:	f001 fb03 	bl	8002c90 <HAL_ETH_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 fa70 	bl	8001b74 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001694:	2238      	movs	r2, #56	@ 0x38
 8001696:	2100      	movs	r1, #0
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_ETH_Init+0x98>)
 800169a:	f005 fae0 	bl	8006c5e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_ETH_Init+0x98>)
 80016a0:	2221      	movs	r2, #33	@ 0x21
 80016a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_ETH_Init+0x98>)
 80016a6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80016aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_ETH_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000200 	.word	0x20000200
 80016bc:	40028000 	.word	0x40028000
 80016c0:	200008b0 	.word	0x200008b0
 80016c4:	200000c0 	.word	0x200000c0
 80016c8:	20000020 	.word	0x20000020
 80016cc:	20000180 	.word	0x20000180

080016d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	@ 0x38
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001702:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001704:	4a38      	ldr	r2, [pc, #224]	@ (80017e8 <MX_TIM3_Init+0x118>)
 8001706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5400-1;
 8001708:	4b36      	ldr	r3, [pc, #216]	@ (80017e4 <MX_TIM3_Init+0x114>)
 800170a:	f241 5217 	movw	r2, #5399	@ 0x1517
 800170e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001716:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001718:	2263      	movs	r2, #99	@ 0x63
 800171a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <MX_TIM3_Init+0x114>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001728:	482e      	ldr	r0, [pc, #184]	@ (80017e4 <MX_TIM3_Init+0x114>)
 800172a:	f003 fa73 	bl	8004c14 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001734:	f000 fa1e 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001742:	4619      	mov	r1, r3
 8001744:	4827      	ldr	r0, [pc, #156]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001746:	f003 fdab 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001750:	f000 fa10 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001754:	4823      	ldr	r0, [pc, #140]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001756:	f003 fab4 	bl	8004cc2 <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001760:	f000 fa08 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	481c      	ldr	r0, [pc, #112]	@ (80017e4 <MX_TIM3_Init+0x114>)
 8001774:	f004 fa28 	bl	8005bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800177e:	f000 f9f9 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	@ 0x60
 8001784:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <MX_TIM3_Init+0x114>)
 800179a:	f003 fc6d 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80017a4:	f000 f9e6 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	2208      	movs	r2, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_TIM3_Init+0x114>)
 80017b0:	f003 fc62 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80017ba:	f000 f9db 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	220c      	movs	r2, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_TIM3_Init+0x114>)
 80017c6:	f003 fc57 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80017d0:	f000 f9d0 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d4:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MX_TIM3_Init+0x114>)
 80017d6:	f000 fb23 	bl	8001e20 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	@ 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002b0 	.word	0x200002b0
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001806:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <MX_TIM10_Init+0x98>)
 8001808:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <MX_TIM10_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800181c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800182a:	4815      	ldr	r0, [pc, #84]	@ (8001880 <MX_TIM10_Init+0x94>)
 800182c:	f003 f9f2 	bl	8004c14 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001836:	f000 f99d 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800183a:	4811      	ldr	r0, [pc, #68]	@ (8001880 <MX_TIM10_Init+0x94>)
 800183c:	f003 fa41 	bl	8004cc2 <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001846:	f000 f995 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	2360      	movs	r3, #96	@ 0x60
 800184c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800184e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001852:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001864:	f003 fc08 	bl	8005078 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800186e:	f000 f981 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_TIM10_Init+0x94>)
 8001874:	f000 fad4 	bl	8001e20 <HAL_TIM_MspPostInit>

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002fc 	.word	0x200002fc
 8001884:	40014400 	.word	0x40014400

08001888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <MX_USART3_UART_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_USART3_UART_Init+0x58>)
 80018cc:	f004 fa0a 	bl	8005ce4 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018d6:	f000 f94d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000348 	.word	0x20000348
 80018e4:	40004800 	.word	0x40004800

080018e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018f6:	2206      	movs	r2, #6
 80018f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001908:	2202      	movs	r2, #2
 800190a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190e:	2201      	movs	r2, #1
 8001910:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001920:	2201      	movs	r2, #1
 8001922:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192c:	f001 fedb 	bl	80036e6 <HAL_PCD_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001936:	f000 f91d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200003d0 	.word	0x200003d0

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08e      	sub	sp, #56	@ 0x38
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b58 <MX_GPIO_Init+0x214>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b7c      	ldr	r3, [pc, #496]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	4b79      	ldr	r3, [pc, #484]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a78      	ldr	r2, [pc, #480]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	4b73      	ldr	r3, [pc, #460]	@ (8001b58 <MX_GPIO_Init+0x214>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a72      	ldr	r2, [pc, #456]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b70      	ldr	r3, [pc, #448]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b67      	ldr	r3, [pc, #412]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a66      	ldr	r2, [pc, #408]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b64      	ldr	r3, [pc, #400]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d2:	4b61      	ldr	r3, [pc, #388]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a60      	ldr	r2, [pc, #384]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b5e      	ldr	r3, [pc, #376]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <MX_GPIO_Init+0x214>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a02:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a54      	ldr	r2, [pc, #336]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <MX_GPIO_Init+0x214>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_4|GPIO_PIN_5|LD2_Pin
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f240 31b1 	movw	r1, #945	@ 0x3b1
 8001a20:	484e      	ldr	r0, [pc, #312]	@ (8001b5c <MX_GPIO_Init+0x218>)
 8001a22:	f001 fe47 	bl	80036b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001a2c:	484c      	ldr	r0, [pc, #304]	@ (8001b60 <MX_GPIO_Init+0x21c>)
 8001a2e:	f001 fe41 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001a38:	484a      	ldr	r0, [pc, #296]	@ (8001b64 <MX_GPIO_Init+0x220>)
 8001a3a:	f001 fe3b 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	4849      	ldr	r0, [pc, #292]	@ (8001b68 <MX_GPIO_Init+0x224>)
 8001a44:	f001 fe36 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001a4e:	4847      	ldr	r0, [pc, #284]	@ (8001b6c <MX_GPIO_Init+0x228>)
 8001a50:	f001 fe30 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4840      	ldr	r0, [pc, #256]	@ (8001b6c <MX_GPIO_Init+0x228>)
 8001a6c:	f001 fc5e 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a70:	2378      	movs	r3, #120	@ 0x78
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	483b      	ldr	r0, [pc, #236]	@ (8001b70 <MX_GPIO_Init+0x22c>)
 8001a84:	f001 fc52 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB4 PB5 LD2_Pin
                           PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_4|GPIO_PIN_5|LD2_Pin
 8001a88:	f240 33b1 	movw	r3, #945	@ 0x3b1
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	482e      	ldr	r0, [pc, #184]	@ (8001b5c <MX_GPIO_Init+0x218>)
 8001aa2:	f001 fc43 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001aa6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4828      	ldr	r0, [pc, #160]	@ (8001b60 <MX_GPIO_Init+0x21c>)
 8001ac0:	f001 fc34 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ac4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4820      	ldr	r0, [pc, #128]	@ (8001b5c <MX_GPIO_Init+0x218>)
 8001ada:	f001 fc27 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ade:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <MX_GPIO_Init+0x220>)
 8001af8:	f001 fc18 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001afc:	2340      	movs	r3, #64	@ 0x40
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4815      	ldr	r0, [pc, #84]	@ (8001b68 <MX_GPIO_Init+0x224>)
 8001b14:	f001 fc0a 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480f      	ldr	r0, [pc, #60]	@ (8001b68 <MX_GPIO_Init+0x224>)
 8001b2c:	f001 fbfe 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b30:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <MX_GPIO_Init+0x228>)
 8001b4a:	f001 fbef 	bl	800332c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4e:	bf00      	nop
 8001b50:	3738      	adds	r7, #56	@ 0x38
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020000 	.word	0x40020000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <Error_Handler+0x8>

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_MspInit+0x44>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a15      	ldr	r2, [pc, #84]	@ (8001c3c <HAL_ADC_MspInit+0x74>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d123      	bne.n	8001c32 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_ADC_MspInit+0x78>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <HAL_ADC_MspInit+0x7c>)
 8001c2e:	f001 fb7d 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800

08001c48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08e      	sub	sp, #56	@ 0x38
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4e      	ldr	r2, [pc, #312]	@ (8001da0 <HAL_ETH_MspInit+0x158>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	f040 8096 	bne.w	8001d98 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c78:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c80:	623b      	str	r3, [r7, #32]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a46      	ldr	r2, [pc, #280]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c90:	4b44      	ldr	r3, [pc, #272]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4a40      	ldr	r2, [pc, #256]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001ca2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	4a34      	ldr	r2, [pc, #208]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_ETH_MspInit+0x15c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d14:	2332      	movs	r3, #50	@ 0x32
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d24:	230b      	movs	r3, #11
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481e      	ldr	r0, [pc, #120]	@ (8001da8 <HAL_ETH_MspInit+0x160>)
 8001d30:	f001 fafc 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d34:	2386      	movs	r3, #134	@ 0x86
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d44:	230b      	movs	r3, #11
 8001d46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4817      	ldr	r0, [pc, #92]	@ (8001dac <HAL_ETH_MspInit+0x164>)
 8001d50:	f001 faec 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d66:	230b      	movs	r3, #11
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480f      	ldr	r0, [pc, #60]	@ (8001db0 <HAL_ETH_MspInit+0x168>)
 8001d72:	f001 fadb 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d76:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d88:	230b      	movs	r3, #11
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <HAL_ETH_MspInit+0x16c>)
 8001d94:	f001 faca 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001d98:	bf00      	nop
 8001d9a:	3738      	adds	r7, #56	@ 0x38
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40028000 	.word	0x40028000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40021800 	.word	0x40021800

08001db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10c      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001de2:	e010      	b.n	8001e06 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM10)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <HAL_TIM_Base_MspInit+0x64>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10b      	bne.n	8001e06 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_TIM_Base_MspInit+0x60>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40014400 	.word	0x40014400

08001e20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ec8 <HAL_TIM_MspPostInit+0xa8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11d      	bne.n	8001e7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001e5a:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <HAL_TIM_MspPostInit+0xb0>)
 8001e78:	f001 fa58 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001e7c:	e020      	b.n	8001ec0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM10)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <HAL_TIM_MspPostInit+0xb4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_TIM_MspPostInit+0xac>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ea0:	2340      	movs	r3, #64	@ 0x40
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <HAL_TIM_MspPostInit+0xb8>)
 8001ebc:	f001 fa36 	bl	800332c <HAL_GPIO_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	@ 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40014400 	.word	0x40014400
 8001ed8:	40021400 	.word	0x40021400

08001edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ae      	sub	sp, #184	@ 0xb8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2290      	movs	r2, #144	@ 0x90
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 feae 	bl	8006c5e <memset>
  if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	@ (8001f90 <HAL_UART_MspInit+0xb4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d13c      	bne.n	8001f86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fa52 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f26:	f7ff fe25 	bl	8001b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a19      	ldr	r2, [pc, #100]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_UART_MspInit+0xb8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f74:	2307      	movs	r3, #7
 8001f76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <HAL_UART_MspInit+0xbc>)
 8001f82:	f001 f9d3 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f86:	bf00      	nop
 8001f88:	37b8      	adds	r7, #184	@ 0xb8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40004800 	.word	0x40004800
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ae      	sub	sp, #184	@ 0xb8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2290      	movs	r2, #144	@ 0x90
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fe4e 	bl	8006c5e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fca:	d159      	bne.n	8002080 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 f9f1 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fe8:	f7ff fdc4 	bl	8001b74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	4a25      	ldr	r2, [pc, #148]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002004:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800201e:	230a      	movs	r3, #10
 8002020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002028:	4619      	mov	r1, r3
 800202a:	4818      	ldr	r0, [pc, #96]	@ (800208c <HAL_PCD_MspInit+0xf0>)
 800202c:	f001 f97e 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002044:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002048:	4619      	mov	r1, r3
 800204a:	4810      	ldr	r0, [pc, #64]	@ (800208c <HAL_PCD_MspInit+0xf0>)
 800204c:	f001 f96e 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800205a:	6353      	str	r3, [r2, #52]	@ 0x34
 800205c:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 800206a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206c:	4a06      	ldr	r2, [pc, #24]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 800206e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002072:	6453      	str	r3, [r2, #68]	@ 0x44
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <HAL_PCD_MspInit+0xec>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002080:	bf00      	nop
 8002082:	37b8      	adds	r7, #184	@ 0xb8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <NMI_Handler+0x4>

08002098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <MemManage_Handler+0x4>

080020a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e6:	f000 f87b 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800214c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	@ (8002154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	@ (8002160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002142:	f004 fd95 	bl	8006c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7ff f91b 	bl	8001380 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800214c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002158:	08006d80 	.word	0x08006d80
  ldr r2, =_sbss
 800215c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002160:	200008bc 	.word	0x200008bc

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>

08002166 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216a:	2003      	movs	r0, #3
 800216c:	f000 fd5c 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f805 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002176:	f7ff fd03 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fd69 	bl	8002c76 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 fd3f 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000014 	.word	0x20000014
 80021d8:	2000001c 	.word	0x2000001c
 80021dc:	20000018 	.word	0x20000018

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000001c 	.word	0x2000001c
 8002204:	200008b8 	.word	0x200008b8

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200008b8 	.word	0x200008b8

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000001c 	.word	0x2000001c

08002268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e031      	b.n	80022e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fc9e 	bl	8001bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_ADC_Init+0x84>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fb0a 	bl	80028d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	ffffeefd 	.word	0xffffeefd

080022f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Start+0x1a>
 8002306:	2302      	movs	r3, #2
 8002308:	e0ad      	b.n	8002466 <HAL_ADC_Start+0x176>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d018      	beq.n	8002352 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002330:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_ADC_Start+0x184>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a50      	ldr	r2, [pc, #320]	@ (8002478 <HAL_ADC_Start+0x188>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9a      	lsrs	r2, r3, #18
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002344:	e002      	b.n	800234c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3b01      	subs	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f9      	bne.n	8002346 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d175      	bne.n	800244c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002364:	4b45      	ldr	r3, [pc, #276]	@ (800247c <HAL_ADC_Start+0x18c>)
 8002366:	4013      	ands	r3, r2
 8002368:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002386:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800239a:	d106      	bne.n	80023aa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	f023 0206 	bic.w	r2, r3, #6
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <HAL_ADC_Start+0x190>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d143      	bne.n	8002464 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e03a      	b.n	8002464 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	@ (8002484 <HAL_ADC_Start+0x194>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10e      	bne.n	8002416 <HAL_ADC_Start+0x126>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002414:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_ADC_Start+0x190>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d120      	bne.n	8002464 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_ADC_Start+0x198>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d11b      	bne.n	8002464 <HAL_ADC_Start+0x174>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e00b      	b.n	8002464 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f043 0210 	orr.w	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000014 	.word	0x20000014
 8002478:	431bde83 	.word	0x431bde83
 800247c:	fffff8fe 	.word	0xfffff8fe
 8002480:	40012300 	.word	0x40012300
 8002484:	40012000 	.word	0x40012000
 8002488:	40012200 	.word	0x40012200

0800248c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_Stop+0x16>
 800249e:	2302      	movs	r3, #2
 80024a0:	e01f      	b.n	80024e2 <HAL_ADC_Stop+0x56>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_ADC_Stop+0x64>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	ffffeefe 	.word	0xffffeefe

080024f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002510:	d113      	bne.n	800253a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800251c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002520:	d10b      	bne.n	800253a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e063      	b.n	8002602 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800253a:	f7ff fe65 	bl	8002208 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002540:	e021      	b.n	8002586 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d01d      	beq.n	8002586 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_ADC_PollForConversion+0x6c>
 8002550:	f7ff fe5a 	bl	8002208 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d212      	bcs.n	8002586 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d00b      	beq.n	8002586 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03d      	b.n	8002602 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	d1d6      	bne.n	8002542 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0212 	mvn.w	r2, #18
 800259c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d123      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11f      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e136      	b.n	80028ae <HAL_ADC_ConfigChannel+0x28a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d93a      	bls.n	80026c6 <HAL_ADC_ConfigChannel+0xa2>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002658:	d035      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	3b1e      	subs	r3, #30
 8002670:	2207      	movs	r2, #7
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	400a      	ands	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a8d      	ldr	r2, [pc, #564]	@ (80028bc <HAL_ADC_ConfigChannel+0x298>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68d9      	ldr	r1, [r3, #12]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	061a      	lsls	r2, r3, #24
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269e:	e035      	b.n	800270c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4403      	add	r3, r0
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	409a      	lsls	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c4:	e022      	b.n	800270c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6919      	ldr	r1, [r3, #16]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4403      	add	r3, r0
 8002702:	409a      	lsls	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d824      	bhi.n	800275e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b05      	subs	r3, #5
 8002726:	221f      	movs	r2, #31
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43da      	mvns	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	400a      	ands	r2, r1
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b05      	subs	r3, #5
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	635a      	str	r2, [r3, #52]	@ 0x34
 800275c:	e04c      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d824      	bhi.n	80027b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b23      	subs	r3, #35	@ 0x23
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	3b23      	subs	r3, #35	@ 0x23
 80027a2:	fa00 f203 	lsl.w	r2, r0, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ae:	e023      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b41      	subs	r3, #65	@ 0x41
 80027c2:	221f      	movs	r2, #31
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b41      	subs	r3, #65	@ 0x41
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a30      	ldr	r2, [pc, #192]	@ (80028c0 <HAL_ADC_ConfigChannel+0x29c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1f4>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800280a:	d105      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800280c:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a2c      	ldr	r2, [pc, #176]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002812:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002816:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <HAL_ADC_ConfigChannel+0x29c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10f      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x21e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b12      	cmp	r3, #18
 8002828:	d10b      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800282a:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002830:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002834:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002836:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800283c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002840:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <HAL_ADC_ConfigChannel+0x29c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d12b      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x280>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <HAL_ADC_ConfigChannel+0x298>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <HAL_ADC_ConfigChannel+0x23a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b11      	cmp	r3, #17
 800285c:	d122      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a18      	ldr	r2, [pc, #96]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002864:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002868:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002870:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002874:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <HAL_ADC_ConfigChannel+0x298>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <HAL_ADC_ConfigChannel+0x2a8>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9a      	lsrs	r2, r3, #18
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002896:	e002      	b.n	800289e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3b01      	subs	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	10000012 	.word	0x10000012
 80028c0:	40012000 	.word	0x40012000
 80028c4:	40012300 	.word	0x40012300
 80028c8:	20000014 	.word	0x20000014
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028d8:	4b78      	ldr	r3, [pc, #480]	@ (8002abc <ADC_Init+0x1ec>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a77      	ldr	r2, [pc, #476]	@ (8002abc <ADC_Init+0x1ec>)
 80028de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80028e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028e4:	4b75      	ldr	r3, [pc, #468]	@ (8002abc <ADC_Init+0x1ec>)
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4973      	ldr	r1, [pc, #460]	@ (8002abc <ADC_Init+0x1ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <ADC_Init+0x1f0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e00f      	b.n	80029ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0202 	bic.w	r2, r2, #2
 80029d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	3b01      	subs	r3, #1
 8002a24:	035a      	lsls	r2, r3, #13
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e007      	b.n	8002a40 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	051a      	lsls	r2, r3, #20
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a82:	025a      	lsls	r2, r3, #9
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	029a      	lsls	r2, r3, #10
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40012300 	.word	0x40012300
 8002ac0:	0f000001 	.word	0x0f000001

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <__NVIC_SetPriorityGrouping+0x40>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	@ (8002b04 <__NVIC_SetPriorityGrouping+0x40>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00
 8002b08:	05fa0000 	.word	0x05fa0000

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	@ (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	@ (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	@ 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	@ 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff47 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff5c 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffb0 	bl	8002be4 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e086      	b.n	8002db0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2223      	movs	r2, #35	@ 0x23
 8002cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe ffc7 	bl	8001c48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_ETH_Init+0x128>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8002db8 <HAL_ETH_Init+0x128>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8002db8 <HAL_ETH_Init+0x128>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_ETH_Init+0x12c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4a39      	ldr	r2, [pc, #228]	@ (8002dbc <HAL_ETH_Init+0x12c>)
 8002cd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002cde:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <HAL_ETH_Init+0x12c>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4935      	ldr	r1, [pc, #212]	@ (8002dbc <HAL_ETH_Init+0x12c>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002cec:	4b33      	ldr	r3, [pc, #204]	@ (8002dbc <HAL_ETH_Init+0x12c>)
 8002cee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d08:	f7ff fa7e 	bl	8002208 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d0e:	e011      	b.n	8002d34 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d10:	f7ff fa7a 	bl	8002208 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d1e:	d909      	bls.n	8002d34 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2204      	movs	r2, #4
 8002d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	22e0      	movs	r2, #224	@ 0xe0
 8002d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e03d      	b.n	8002db0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e4      	bne.n	8002d10 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f97a 	bl	8003040 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa25 	bl	800319c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa7b 	bl	800324e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f9e3 	bl	800312c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002d74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_ETH_Init+0x130>)
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002d9a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2210      	movs	r2, #16
 8002daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	00020060 	.word	0x00020060

08002dc4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <ETH_SetMACConfig+0x164>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	7b9b      	ldrb	r3, [r3, #14]
 8002de2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	7c12      	ldrb	r2, [r2, #16]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d102      	bne.n	8002df2 <ETH_SetMACConfig+0x2e>
 8002dec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002df0:	e000      	b.n	8002df4 <ETH_SetMACConfig+0x30>
 8002df2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002df4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	7c52      	ldrb	r2, [r2, #17]
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	d102      	bne.n	8002e04 <ETH_SetMACConfig+0x40>
 8002dfe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e02:	e000      	b.n	8002e06 <ETH_SetMACConfig+0x42>
 8002e04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	7fdb      	ldrb	r3, [r3, #31]
 8002e12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	7f92      	ldrb	r2, [r2, #30]
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d102      	bne.n	8002e2a <ETH_SetMACConfig+0x66>
 8002e24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e28:	e000      	b.n	8002e2c <ETH_SetMACConfig+0x68>
 8002e2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	791b      	ldrb	r3, [r3, #4]
 8002e40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e4a:	2a00      	cmp	r2, #0
 8002e4c:	d102      	bne.n	8002e54 <ETH_SetMACConfig+0x90>
 8002e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e52:	e000      	b.n	8002e56 <ETH_SetMACConfig+0x92>
 8002e54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7bdb      	ldrb	r3, [r3, #15]
 8002e5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff f9ca 	bl	8002220 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d101      	bne.n	8002eba <ETH_SetMACConfig+0xf6>
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	e000      	b.n	8002ebc <ETH_SetMACConfig+0xf8>
 8002eba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ebc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ec2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002eca:	2a01      	cmp	r2, #1
 8002ecc:	d101      	bne.n	8002ed2 <ETH_SetMACConfig+0x10e>
 8002ece:	2208      	movs	r2, #8
 8002ed0:	e000      	b.n	8002ed4 <ETH_SetMACConfig+0x110>
 8002ed2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ed4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002edc:	2a01      	cmp	r2, #1
 8002ede:	d101      	bne.n	8002ee4 <ETH_SetMACConfig+0x120>
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	e000      	b.n	8002ee6 <ETH_SetMACConfig+0x122>
 8002ee4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002eee:	2a01      	cmp	r2, #1
 8002ef0:	d101      	bne.n	8002ef6 <ETH_SetMACConfig+0x132>
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	e000      	b.n	8002ef8 <ETH_SetMACConfig+0x134>
 8002ef6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7ff f985 	bl	8002220 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	fd20810f 	.word	0xfd20810f

08002f2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <ETH_SetDMAConfig+0x110>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	7b1b      	ldrb	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <ETH_SetDMAConfig+0x2c>
 8002f52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f56:	e000      	b.n	8002f5a <ETH_SetDMAConfig+0x2e>
 8002f58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7b5b      	ldrb	r3, [r3, #13]
 8002f5e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f60:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	7f52      	ldrb	r2, [r2, #29]
 8002f66:	2a00      	cmp	r2, #0
 8002f68:	d102      	bne.n	8002f70 <ETH_SetDMAConfig+0x44>
 8002f6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f6e:	e000      	b.n	8002f72 <ETH_SetDMAConfig+0x46>
 8002f70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	7b9b      	ldrb	r3, [r3, #14]
 8002f78:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f7a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	7f1b      	ldrb	r3, [r3, #28]
 8002f86:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	7f9b      	ldrb	r3, [r3, #30]
 8002f8e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f90:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f9e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7ff f92c 	bl	8002220 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	791b      	ldrb	r3, [r3, #4]
 8002fda:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fe0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fe6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ff4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ff6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ffe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003004:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800300e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003012:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003020:	2001      	movs	r0, #1
 8003022:	f7ff f8fd 	bl	8002220 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	f8de3f23 	.word	0xf8de3f23

08003040 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0a6      	sub	sp, #152	@ 0x98
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003054:	2300      	movs	r3, #0
 8003056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003082:	2300      	movs	r3, #0
 8003084:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800308c:	2300      	movs	r3, #0
 800308e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff fe7f 	bl	8002dc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003100:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003106:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800310e:	2300      	movs	r3, #0
 8003110:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff05 	bl	8002f2c <ETH_SetDMAConfig>
}
 8003122:	bf00      	nop
 8003124:	3798      	adds	r7, #152	@ 0x98
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3305      	adds	r3, #5
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	3204      	adds	r2, #4
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <ETH_MACAddressConfig+0x68>)
 800314e:	4413      	add	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3303      	adds	r3, #3
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	061a      	lsls	r2, r3, #24
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3302      	adds	r3, #2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3301      	adds	r3, #1
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	4313      	orrs	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <ETH_MACAddressConfig+0x6c>)
 800317e:	4413      	add	r3, r2
 8003180:	461a      	mov	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6013      	str	r3, [r2, #0]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40028040 	.word	0x40028040
 8003198:	40028044 	.word	0x40028044

0800319c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e03e      	b.n	8003228 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68d9      	ldr	r1, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	3206      	adds	r2, #6
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d80c      	bhi.n	800320c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e004      	b.n	8003216 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3301      	adds	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d9bd      	bls.n	80031aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003240:	611a      	str	r2, [r3, #16]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e048      	b.n	80032ee <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6919      	ldr	r1, [r3, #16]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2200      	movs	r2, #0
 8003284:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003298:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	3212      	adds	r2, #18
 80032ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d80c      	bhi.n	80032de <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6919      	ldr	r1, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e004      	b.n	80032e8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d9b3      	bls.n	800325c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800331e:	60da      	str	r2, [r3, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	@ 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e175      	b.n	8003638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	429a      	cmp	r2, r3
 8003366:	f040 8164 	bne.w	8003632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d005      	beq.n	8003382 <HAL_GPIO_Init+0x56>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d130      	bne.n	80033e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b8:	2201      	movs	r2, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 0201 	and.w	r2, r3, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d017      	beq.n	8003420 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d123      	bne.n	8003474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	08da      	lsrs	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3208      	adds	r2, #8
 8003434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80be 	beq.w	8003632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b6:	4b66      	ldr	r3, [pc, #408]	@ (8003650 <HAL_GPIO_Init+0x324>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	4a65      	ldr	r2, [pc, #404]	@ (8003650 <HAL_GPIO_Init+0x324>)
 80034bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c2:	4b63      	ldr	r3, [pc, #396]	@ (8003650 <HAL_GPIO_Init+0x324>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034ce:	4a61      	ldr	r2, [pc, #388]	@ (8003654 <HAL_GPIO_Init+0x328>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a58      	ldr	r2, [pc, #352]	@ (8003658 <HAL_GPIO_Init+0x32c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d037      	beq.n	800356a <HAL_GPIO_Init+0x23e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_GPIO_Init+0x330>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_GPIO_Init+0x23a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a56      	ldr	r2, [pc, #344]	@ (8003660 <HAL_GPIO_Init+0x334>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02b      	beq.n	8003562 <HAL_GPIO_Init+0x236>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a55      	ldr	r2, [pc, #340]	@ (8003664 <HAL_GPIO_Init+0x338>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d025      	beq.n	800355e <HAL_GPIO_Init+0x232>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_GPIO_Init+0x33c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01f      	beq.n	800355a <HAL_GPIO_Init+0x22e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a53      	ldr	r2, [pc, #332]	@ (800366c <HAL_GPIO_Init+0x340>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d019      	beq.n	8003556 <HAL_GPIO_Init+0x22a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a52      	ldr	r2, [pc, #328]	@ (8003670 <HAL_GPIO_Init+0x344>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_GPIO_Init+0x226>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a51      	ldr	r2, [pc, #324]	@ (8003674 <HAL_GPIO_Init+0x348>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00d      	beq.n	800354e <HAL_GPIO_Init+0x222>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a50      	ldr	r2, [pc, #320]	@ (8003678 <HAL_GPIO_Init+0x34c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <HAL_GPIO_Init+0x21e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4f      	ldr	r2, [pc, #316]	@ (800367c <HAL_GPIO_Init+0x350>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_GPIO_Init+0x21a>
 8003542:	2309      	movs	r3, #9
 8003544:	e012      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003546:	230a      	movs	r3, #10
 8003548:	e010      	b.n	800356c <HAL_GPIO_Init+0x240>
 800354a:	2308      	movs	r3, #8
 800354c:	e00e      	b.n	800356c <HAL_GPIO_Init+0x240>
 800354e:	2307      	movs	r3, #7
 8003550:	e00c      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003552:	2306      	movs	r3, #6
 8003554:	e00a      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003556:	2305      	movs	r3, #5
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x240>
 800355a:	2304      	movs	r3, #4
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x240>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x240>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	@ (8003654 <HAL_GPIO_Init+0x328>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358a:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <HAL_GPIO_Init+0x354>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ae:	4a34      	ldr	r2, [pc, #208]	@ (8003680 <HAL_GPIO_Init+0x354>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b4:	4b32      	ldr	r3, [pc, #200]	@ (8003680 <HAL_GPIO_Init+0x354>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d8:	4a29      	ldr	r2, [pc, #164]	@ (8003680 <HAL_GPIO_Init+0x354>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035de:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <HAL_GPIO_Init+0x354>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003602:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_GPIO_Init+0x354>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <HAL_GPIO_Init+0x354>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362c:	4a14      	ldr	r2, [pc, #80]	@ (8003680 <HAL_GPIO_Init+0x354>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f ae86 	bls.w	800334c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40021400 	.word	0x40021400
 8003670:	40021800 	.word	0x40021800
 8003674:	40021c00 	.word	0x40021c00
 8003678:	40022000 	.word	0x40022000
 800367c:	40022400 	.word	0x40022400
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e001      	b.n	80036a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af02      	add	r7, sp, #8
 80036ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e108      	b.n	800390a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fc42 	bl	8001f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003726:	d102      	bne.n	800372e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fffe 	bl	8006734 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7c1a      	ldrb	r2, [r3, #16]
 8003740:	f88d 2000 	strb.w	r2, [sp]
 8003744:	3304      	adds	r3, #4
 8003746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003748:	f002 ff9a 	bl	8006680 <USB_CoreInit>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0d5      	b.n	800390a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fff6 	bl	8006756 <USB_SetCurrentMode>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0c6      	b.n	800390a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	e04a      	b.n	8003818 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3315      	adds	r3, #21
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3314      	adds	r3, #20
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	b298      	uxth	r0, r3
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	332e      	adds	r3, #46	@ 0x2e
 80037be:	4602      	mov	r2, r0
 80037c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037c2:	7bfa      	ldrb	r2, [r7, #15]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3318      	adds	r3, #24
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	331c      	adds	r3, #28
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3320      	adds	r3, #32
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3324      	adds	r3, #36	@ 0x24
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3301      	adds	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3af      	bcc.n	8003782 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e044      	b.n	80038b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	3301      	adds	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	791b      	ldrb	r3, [r3, #4]
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3b5      	bcc.n	8003828 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7c1a      	ldrb	r2, [r3, #16]
 80038c4:	f88d 2000 	strb.w	r2, [sp]
 80038c8:	3304      	adds	r3, #4
 80038ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038cc:	f002 ff90 	bl	80067f0 <USB_DevInit>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e013      	b.n	800390a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7b1b      	ldrb	r3, [r3, #12]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f80b 	bl	8003914 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f94b 	bl	8006b9e <USB_DevDisconnect>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_PCDEx_ActivateLPM+0x44>)
 8003944:	4313      	orrs	r3, r2
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	10000003 	.word	0x10000003

0800395c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40007000 	.word	0x40007000

0800397c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b23      	ldr	r3, [pc, #140]	@ (8003a14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4a22      	ldr	r2, [pc, #136]	@ (8003a14 <HAL_PWREx_EnableOverDrive+0x98>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	@ 0x40
 8003992:	4b20      	ldr	r3, [pc, #128]	@ (8003a14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800399e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039aa:	f7fe fc2d 	bl	8002208 <HAL_GetTick>
 80039ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b0:	e009      	b.n	80039c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b2:	f7fe fc29 	bl	8002208 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039c0:	d901      	bls.n	80039c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e022      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039c6:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d2:	d1ee      	bne.n	80039b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039d4:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e0:	f7fe fc12 	bl	8002208 <HAL_GetTick>
 80039e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039e6:	e009      	b.n	80039fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e8:	f7fe fc0e 	bl	8002208 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039f6:	d901      	bls.n	80039fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e007      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039fc:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a08:	d1ee      	bne.n	80039e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e29b      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8087 	beq.w	8003b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a40:	4b96      	ldr	r3, [pc, #600]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 030c 	and.w	r3, r3, #12
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d00c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4c:	4b93      	ldr	r3, [pc, #588]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d112      	bne.n	8003a7e <HAL_RCC_OscConfig+0x62>
 8003a58:	4b90      	ldr	r3, [pc, #576]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	4b8d      	ldr	r3, [pc, #564]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d06c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x130>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d168      	bne.n	8003b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e275      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x7a>
 8003a88:	4b84      	ldr	r3, [pc, #528]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a83      	ldr	r2, [pc, #524]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x9c>
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7b      	ldr	r2, [pc, #492]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0xc0>
 8003ac2:	4b76      	ldr	r3, [pc, #472]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a75      	ldr	r2, [pc, #468]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b73      	ldr	r3, [pc, #460]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a72      	ldr	r2, [pc, #456]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xd8>
 8003adc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6b      	ldr	r2, [pc, #428]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb84 	bl	8002208 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb80 	bl	8002208 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e229      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b61      	ldr	r3, [pc, #388]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xe8>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb70 	bl	8002208 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fb6c 	bl	8002208 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e215      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b57      	ldr	r3, [pc, #348]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x110>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d069      	beq.n	8003c2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5a:	4b50      	ldr	r3, [pc, #320]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x190>
 8003b72:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1e9      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b41      	ldr	r3, [pc, #260]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	493d      	ldr	r1, [pc, #244]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e040      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d023      	beq.n	8003bfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a38      	ldr	r2, [pc, #224]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fb22 	bl	8002208 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fe fb1e 	bl	8002208 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1c7      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b30      	ldr	r3, [pc, #192]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4929      	ldr	r1, [pc, #164]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfc:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fafe 	bl	8002208 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c10:	f7fe fafa 	bl	8002208 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1a3      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d038      	beq.n	8003cac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d019      	beq.n	8003c76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c46:	4a15      	ldr	r2, [pc, #84]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fadb 	bl	8002208 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe fad7 	bl	8002208 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e180      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x23a>
 8003c74:	e01a      	b.n	8003cac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7a:	4a08      	ldr	r2, [pc, #32]	@ (8003c9c <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fe fac1 	bl	8002208 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fabd 	bl	8002208 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d903      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e166      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
 8003c9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	4b92      	ldr	r3, [pc, #584]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ee      	bne.n	8003c8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a4 	beq.w	8003e02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cba:	4b8c      	ldr	r3, [pc, #560]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b89      	ldr	r3, [pc, #548]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	4a88      	ldr	r2, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd2:	4b86      	ldr	r3, [pc, #536]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce2:	4b83      	ldr	r3, [pc, #524]	@ (8003ef0 <HAL_RCC_OscConfig+0x4d4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cee:	4b80      	ldr	r3, [pc, #512]	@ (8003ef0 <HAL_RCC_OscConfig+0x4d4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef0 <HAL_RCC_OscConfig+0x4d4>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fa85 	bl	8002208 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fe fa81 	bl	8002208 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	@ 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e12a      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d14:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <HAL_RCC_OscConfig+0x4d4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x31a>
 8003d28:	4b70      	ldr	r3, [pc, #448]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a6f      	ldr	r2, [pc, #444]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	e02d      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x33c>
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	4a6a      	ldr	r2, [pc, #424]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4a:	4b68      	ldr	r3, [pc, #416]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4e:	4a67      	ldr	r2, [pc, #412]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d56:	e01c      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x35e>
 8003d60:	4b62      	ldr	r3, [pc, #392]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a61      	ldr	r2, [pc, #388]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a5e      	ldr	r2, [pc, #376]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x376>
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d86:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a58      	ldr	r2, [pc, #352]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d015      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fa35 	bl	8002208 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fe fa31 	bl	8002208 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0d8      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	4b4c      	ldr	r3, [pc, #304]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <HAL_RCC_OscConfig+0x386>
 8003dc4:	e014      	b.n	8003df0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fa1f 	bl	8002208 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe fa1b 	bl	8002208 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0c2      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80ae 	beq.w	8003f68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0c:	4b37      	ldr	r3, [pc, #220]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d06d      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d14b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b32      	ldr	r3, [pc, #200]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a31      	ldr	r2, [pc, #196]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f9ec 	bl	8002208 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe f9e8 	bl	8002208 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e091      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	071b      	lsls	r3, r3, #28
 8003e7e:	491b      	ldr	r1, [pc, #108]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe f9ba 	bl	8002208 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe f9b6 	bl	8002208 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e05f      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x47c>
 8003eb6:	e057      	b.n	8003f68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f9a0 	bl	8002208 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe f99c 	bl	8002208 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e045      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	4b03      	ldr	r3, [pc, #12]	@ (8003eec <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x4b0>
 8003eea:	e03d      	b.n	8003f68 <HAL_RCC_OscConfig+0x54c>
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f74 <HAL_RCC_OscConfig+0x558>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d030      	beq.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d129      	bne.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d122      	bne.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d119      	bne.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d10f      	bne.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800

08003f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0d0      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b6a      	ldr	r3, [pc, #424]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d910      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b67      	ldr	r3, [pc, #412]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 020f 	bic.w	r2, r3, #15
 8003fa6:	4965      	ldr	r1, [pc, #404]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d040      	beq.n	800409c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d115      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b41      	ldr	r3, [pc, #260]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e073      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06b      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4936      	ldr	r1, [pc, #216]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fe f8cc 	bl	8002208 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fe f8c8 	bl	8002208 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e053      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2d      	ldr	r3, [pc, #180]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b27      	ldr	r3, [pc, #156]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d210      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b24      	ldr	r3, [pc, #144]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 020f 	bic.w	r2, r3, #15
 80040b2:	4922      	ldr	r1, [pc, #136]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x1cc>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <HAL_RCC_ClockConfig+0x1d0>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1d4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe f828 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	08006d58 	.word	0x08006d58
 8004148:	20000014 	.word	0x20000014
 800414c:	20000018 	.word	0x20000018

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b094      	sub	sp, #80	@ 0x50
 8004156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	647b      	str	r3, [r7, #68]	@ 0x44
 800415c:	2300      	movs	r3, #0
 800415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004160:	2300      	movs	r3, #0
 8004162:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004168:	4b79      	ldr	r3, [pc, #484]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x40>
 8004174:	2b08      	cmp	r3, #8
 8004176:	f200 80e1 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x1ec>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x3a>
 8004182:	e0db      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b73      	ldr	r3, [pc, #460]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x204>)
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004188:	e0db      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x208>)
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800418e:	e0d8      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004198:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800419a:	4b6d      	ldr	r3, [pc, #436]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ba:	2300      	movs	r3, #0
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	f04f 0000 	mov.w	r0, #0
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	0159      	lsls	r1, r3, #5
 80041d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d4:	0150      	lsls	r0, r2, #5
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4621      	mov	r1, r4
 80041dc:	1a51      	subs	r1, r2, r1
 80041de:	6139      	str	r1, [r7, #16]
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb63 0301 	sbc.w	r3, r3, r1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f4:	4659      	mov	r1, fp
 80041f6:	018b      	lsls	r3, r1, #6
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041fe:	4651      	mov	r1, sl
 8004200:	018a      	lsls	r2, r1, #6
 8004202:	4651      	mov	r1, sl
 8004204:	ebb2 0801 	subs.w	r8, r2, r1
 8004208:	4659      	mov	r1, fp
 800420a:	eb63 0901 	sbc.w	r9, r3, r1
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800421e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004222:	4690      	mov	r8, r2
 8004224:	4699      	mov	r9, r3
 8004226:	4623      	mov	r3, r4
 8004228:	eb18 0303 	adds.w	r3, r8, r3
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	462b      	mov	r3, r5
 8004230:	eb49 0303 	adc.w	r3, r9, r3
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004242:	4629      	mov	r1, r5
 8004244:	024b      	lsls	r3, r1, #9
 8004246:	4621      	mov	r1, r4
 8004248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800424c:	4621      	mov	r1, r4
 800424e:	024a      	lsls	r2, r1, #9
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004256:	2200      	movs	r2, #0
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800425c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004260:	f7fb ffea 	bl	8000238 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4613      	mov	r3, r2
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	e058      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b38      	ldr	r3, [pc, #224]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	2200      	movs	r2, #0
 8004276:	4618      	mov	r0, r3
 8004278:	4611      	mov	r1, r2
 800427a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	f04f 0000 	mov.w	r0, #0
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429a:	0150      	lsls	r0, r2, #5
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4641      	mov	r1, r8
 80042a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042c0:	ebb2 040a 	subs.w	r4, r2, sl
 80042c4:	eb63 050b 	sbc.w	r5, r3, fp
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	464b      	mov	r3, r9
 80042e4:	eb45 0303 	adc.w	r3, r5, r3
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f6:	4629      	mov	r1, r5
 80042f8:	028b      	lsls	r3, r1, #10
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004300:	4621      	mov	r1, r4
 8004302:	028a      	lsls	r2, r1, #10
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430a:	2200      	movs	r2, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	61fa      	str	r2, [r7, #28]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	f7fb ff90 	bl	8000238 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004330:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x204>)
 800433e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004344:	4618      	mov	r0, r3
 8004346:	3750      	adds	r7, #80	@ 0x50
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	00f42400 	.word	0x00f42400
 8004358:	007a1200 	.word	0x007a1200

0800435c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <HAL_RCC_GetHCLKFreq+0x14>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000014 	.word	0x20000014

08004374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004378:	f7ff fff0 	bl	800435c <HAL_RCC_GetHCLKFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0a9b      	lsrs	r3, r3, #10
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4903      	ldr	r1, [pc, #12]	@ (8004398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	08006d68 	.word	0x08006d68

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a0:	f7ff ffdc 	bl	800435c <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0b5b      	lsrs	r3, r3, #13
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	@ (80043c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08006d68 	.word	0x08006d68

080043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d012      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043ec:	4b69      	ldr	r3, [pc, #420]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004400:	4964      	ldr	r1, [pc, #400]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800441e:	4b5d      	ldr	r3, [pc, #372]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	4959      	ldr	r1, [pc, #356]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800444a:	2301      	movs	r3, #1
 800444c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d017      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800445a:	4b4e      	ldr	r3, [pc, #312]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004460:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	494a      	ldr	r1, [pc, #296]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800447a:	2301      	movs	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 808b 	beq.w	80045be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	4a39      	ldr	r2, [pc, #228]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80044b4:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044c0:	4b35      	ldr	r3, [pc, #212]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a34      	ldr	r2, [pc, #208]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd fe9c 	bl	8002208 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fd fe98 	bl	8002208 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	@ 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e38f      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f2:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d035      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d02e      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004510:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800451a:	4b1e      	ldr	r3, [pc, #120]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	4a1a      	ldr	r2, [pc, #104]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004532:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d114      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fe60 	bl	8002208 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fd fe5c 	bl	8002208 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e351      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457a:	d111      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800458a:	400b      	ands	r3, r1
 800458c:	4901      	ldr	r1, [pc, #4]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
 8004592:	e00b      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004594:	40023800 	.word	0x40023800
 8004598:	40007000 	.word	0x40007000
 800459c:	0ffffcff 	.word	0x0ffffcff
 80045a0:	4bac      	ldr	r3, [pc, #688]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4aab      	ldr	r2, [pc, #684]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045aa:	6093      	str	r3, [r2, #8]
 80045ac:	4ba9      	ldr	r3, [pc, #676]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b8:	49a6      	ldr	r1, [pc, #664]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ca:	4ba2      	ldr	r3, [pc, #648]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d0:	4aa0      	ldr	r2, [pc, #640]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045da:	4b9e      	ldr	r3, [pc, #632]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e4:	499b      	ldr	r1, [pc, #620]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f8:	4b96      	ldr	r3, [pc, #600]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004606:	4993      	ldr	r1, [pc, #588]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800461a:	4b8e      	ldr	r3, [pc, #568]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004620:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004628:	498a      	ldr	r1, [pc, #552]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463c:	4b85      	ldr	r3, [pc, #532]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464a:	4982      	ldr	r1, [pc, #520]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800465e:	4b7d      	ldr	r3, [pc, #500]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	4979      	ldr	r1, [pc, #484]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004680:	4b74      	ldr	r3, [pc, #464]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f023 0203 	bic.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	4971      	ldr	r1, [pc, #452]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	f023 020c 	bic.w	r2, r3, #12
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b0:	4968      	ldr	r1, [pc, #416]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046c4:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d2:	4960      	ldr	r1, [pc, #384]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	4957      	ldr	r1, [pc, #348]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004708:	4b52      	ldr	r3, [pc, #328]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	494f      	ldr	r1, [pc, #316]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800472a:	4b4a      	ldr	r3, [pc, #296]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004730:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	4946      	ldr	r1, [pc, #280]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800474c:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	493e      	ldr	r1, [pc, #248]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800476e:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800477c:	4935      	ldr	r1, [pc, #212]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004790:	4b30      	ldr	r3, [pc, #192]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479e:	492d      	ldr	r1, [pc, #180]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d011      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047b2:	4b28      	ldr	r3, [pc, #160]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c0:	4924      	ldr	r1, [pc, #144]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d0:	d101      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047f2:	4b18      	ldr	r3, [pc, #96]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004800:	4914      	ldr	r1, [pc, #80]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004824:	490b      	ldr	r1, [pc, #44]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004838:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004848:	4902      	ldr	r1, [pc, #8]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004850:	e002      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004864:	4b8a      	ldr	r3, [pc, #552]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800486a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	4986      	ldr	r1, [pc, #536]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004888:	4b81      	ldr	r3, [pc, #516]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800488e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004898:	497d      	ldr	r1, [pc, #500]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d006      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80d6 	beq.w	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048b4:	4b76      	ldr	r3, [pc, #472]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a75      	ldr	r2, [pc, #468]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c0:	f7fd fca2 	bl	8002208 <HAL_GetTick>
 80048c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c8:	f7fd fc9e 	bl	8002208 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	@ 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e195      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048da:	4b6d      	ldr	r3, [pc, #436]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d021      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d11d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048fa:	4b65      	ldr	r3, [pc, #404]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004908:	4b61      	ldr	r3, [pc, #388]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490e:	0e1b      	lsrs	r3, r3, #24
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4958      	ldr	r1, [pc, #352]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004960:	d129      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004962:	4b4b      	ldr	r3, [pc, #300]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004970:	4b47      	ldr	r3, [pc, #284]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004976:	0f1b      	lsrs	r3, r3, #28
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	493e      	ldr	r1, [pc, #248]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800499e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a4:	f023 021f 	bic.w	r2, r3, #31
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4938      	ldr	r1, [pc, #224]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01d      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049c2:	4b33      	ldr	r3, [pc, #204]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4926      	ldr	r1, [pc, #152]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d011      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	071b      	lsls	r3, r3, #28
 8004a26:	491a      	ldr	r1, [pc, #104]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a2e:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3a:	f7fd fbe5 	bl	8002208 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a42:	f7fd fbe1 	bl	8002208 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	@ 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0d8      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a54:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 80ce 	bne.w	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fd fbc8 	bl	8002208 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a7c:	f7fd fbc4 	bl	8002208 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	@ 0x64
 8004a88:	d904      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0bb      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a94:	4b5e      	ldr	r3, [pc, #376]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aa0:	d0ec      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02e      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d12a      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aca:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	0f1b      	lsrs	r3, r3, #28
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	019a      	lsls	r2, r3, #6
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	431a      	orrs	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	4944      	ldr	r1, [pc, #272]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b06:	4b42      	ldr	r3, [pc, #264]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	3b01      	subs	r3, #1
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	493d      	ldr	r1, [pc, #244]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d022      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b34:	d11d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b36:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	0e1b      	lsrs	r3, r3, #24
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b44:	4b32      	ldr	r3, [pc, #200]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	0f1b      	lsrs	r3, r3, #28
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	061b      	lsls	r3, r3, #24
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	071b      	lsls	r3, r3, #28
 8004b6a:	4929      	ldr	r1, [pc, #164]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d028      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b7e:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b8c:	4b20      	ldr	r3, [pc, #128]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	019a      	lsls	r2, r3, #6
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	071b      	lsls	r3, r3, #28
 8004bb2:	4917      	ldr	r1, [pc, #92]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	4911      	ldr	r1, [pc, #68]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fd fb14 	bl	8002208 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be4:	f7fd fb10 	bl	8002208 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	@ 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e007      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c02:	d1ef      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800

08004c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e049      	b.n	8004cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fd f8bc 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f000 fbee 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e049      	b.n	8004d68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f841 	bl	8004d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fb97 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start+0x24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e03c      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x3e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e02f      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e022      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e015      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e008      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e092      	b.n	8004f50 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xb6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xc6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	e01b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0xe6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xf6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fe76 	bl	8005b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	@ (8004f58 <HAL_TIM_PWM_Start+0x1d4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_PWM_Start+0x120>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f5c <HAL_TIM_PWM_Start+0x1d8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x124>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_PWM_Start+0x126>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a25      	ldr	r2, [pc, #148]	@ (8004f58 <HAL_TIM_PWM_Start+0x1d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a22      	ldr	r2, [pc, #136]	@ (8004f60 <HAL_TIM_PWM_Start+0x1dc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_TIM_PWM_Start+0x1e4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <HAL_TIM_PWM_Start+0x1d8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	@ (8004f6c <HAL_TIM_PWM_Start+0x1e8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x18a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	@ (8004f70 <HAL_TIM_PWM_Start+0x1ec>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d115      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <HAL_TIM_PWM_Start+0x1f0>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d015      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f26:	d011      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	e008      	b.n	8004f4c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e000      	b.n	8004f4e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40001800 	.word	0x40001800
 8004f74:	00010007 	.word	0x00010007

08004f78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fdf6 	bl	8005b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a36      	ldr	r2, [pc, #216]	@ (8005070 <HAL_TIM_PWM_Stop+0xf8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d004      	beq.n	8004fa4 <HAL_TIM_PWM_Stop+0x2c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a35      	ldr	r2, [pc, #212]	@ (8005074 <HAL_TIM_PWM_Stop+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_PWM_Stop+0x30>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_TIM_PWM_Stop+0x32>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d017      	beq.n	8004fde <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10f      	bne.n	8004fde <HAL_TIM_PWM_Stop+0x66>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1a      	ldr	r2, [r3, #32]
 8004fc4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <HAL_TIM_PWM_Stop+0x66>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10f      	bne.n	800500e <HAL_TIM_PWM_Stop+0x96>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_PWM_Stop+0x96>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_TIM_PWM_Stop+0xa6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501c:	e023      	b.n	8005066 <HAL_TIM_PWM_Stop+0xee>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d104      	bne.n	800502e <HAL_TIM_PWM_Stop+0xb6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502c:	e01b      	b.n	8005066 <HAL_TIM_PWM_Stop+0xee>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Stop+0xc6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800503c:	e013      	b.n	8005066 <HAL_TIM_PWM_Stop+0xee>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Stop+0xd6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800504c:	e00b      	b.n	8005066 <HAL_TIM_PWM_Stop+0xee>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b10      	cmp	r3, #16
 8005052:	d104      	bne.n	800505e <HAL_TIM_PWM_Stop+0xe6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505c:	e003      	b.n	8005066 <HAL_TIM_PWM_Stop+0xee>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400

08005078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e0ff      	b.n	8005296 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	f200 80f0 	bhi.w	8005286 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005287 	.word	0x08005287
 80050b4:	08005287 	.word	0x08005287
 80050b8:	08005287 	.word	0x08005287
 80050bc:	08005141 	.word	0x08005141
 80050c0:	08005287 	.word	0x08005287
 80050c4:	08005287 	.word	0x08005287
 80050c8:	08005287 	.word	0x08005287
 80050cc:	08005183 	.word	0x08005183
 80050d0:	08005287 	.word	0x08005287
 80050d4:	08005287 	.word	0x08005287
 80050d8:	08005287 	.word	0x08005287
 80050dc:	080051c3 	.word	0x080051c3
 80050e0:	08005287 	.word	0x08005287
 80050e4:	08005287 	.word	0x08005287
 80050e8:	08005287 	.word	0x08005287
 80050ec:	08005205 	.word	0x08005205
 80050f0:	08005287 	.word	0x08005287
 80050f4:	08005287 	.word	0x08005287
 80050f8:	08005287 	.word	0x08005287
 80050fc:	08005245 	.word	0x08005245
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa40 	bl	800558c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e0a5      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fa92 	bl	8005670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e084      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fae9 	bl	8005760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e064      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fb3f 	bl	800584c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e043      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb76 	bl	80058fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005242:	e023      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fba8 	bl	80059a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005284:	e002      	b.n	800528c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIM_ConfigClockSource+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e0b4      	b.n	8005426 <HAL_TIM_ConfigClockSource+0x186>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4b56      	ldr	r3, [pc, #344]	@ (8005430 <HAL_TIM_ConfigClockSource+0x190>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f4:	d03e      	beq.n	8005374 <HAL_TIM_ConfigClockSource+0xd4>
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fa:	f200 8087 	bhi.w	800540c <HAL_TIM_ConfigClockSource+0x16c>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005302:	f000 8086 	beq.w	8005412 <HAL_TIM_ConfigClockSource+0x172>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530a:	d87f      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b70      	cmp	r3, #112	@ 0x70
 800530e:	d01a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0xa6>
 8005310:	2b70      	cmp	r3, #112	@ 0x70
 8005312:	d87b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b60      	cmp	r3, #96	@ 0x60
 8005316:	d050      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x11a>
 8005318:	2b60      	cmp	r3, #96	@ 0x60
 800531a:	d877      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b50      	cmp	r3, #80	@ 0x50
 800531e:	d03c      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xfa>
 8005320:	2b50      	cmp	r3, #80	@ 0x50
 8005322:	d873      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d058      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x13a>
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	d86f      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d064      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d86b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d060      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d867      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d05a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	e062      	b.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	f000 fbf1 	bl	8005b3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	609a      	str	r2, [r3, #8]
      break;
 8005372:	e04f      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005384:	f000 fbda 	bl	8005b3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005396:	609a      	str	r2, [r3, #8]
      break;
 8005398:	e03c      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	461a      	mov	r2, r3
 80053a8:	f000 fb4e 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2150      	movs	r1, #80	@ 0x50
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fba7 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 80053b8:	e02c      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	461a      	mov	r2, r3
 80053c8:	f000 fb6d 	bl	8005aa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2160      	movs	r1, #96	@ 0x60
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fb97 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 80053d8:	e01c      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 fb2e 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2140      	movs	r1, #64	@ 0x40
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb87 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 80053f8:	e00c      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f000 fb7e 	bl	8005b06 <TIM_ITRx_SetConfig>
      break;
 800540a:	e003      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
      break;
 8005410:	e000      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	fffeff88 	.word	0xfffeff88

08005434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a46      	ldr	r2, [pc, #280]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d00f      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a43      	ldr	r2, [pc, #268]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00b      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a42      	ldr	r2, [pc, #264]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d007      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a41      	ldr	r2, [pc, #260]	@ (800556c <TIM_Base_SetConfig+0x138>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a35      	ldr	r2, [pc, #212]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005494:	d027      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a32      	ldr	r2, [pc, #200]	@ (8005564 <TIM_Base_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d023      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a31      	ldr	r2, [pc, #196]	@ (8005568 <TIM_Base_SetConfig+0x134>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01f      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a30      	ldr	r2, [pc, #192]	@ (800556c <TIM_Base_SetConfig+0x138>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d017      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005574 <TIM_Base_SetConfig+0x140>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005578 <TIM_Base_SetConfig+0x144>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <TIM_Base_SetConfig+0x148>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <TIM_Base_SetConfig+0x14c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005584 <TIM_Base_SetConfig+0x150>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a29      	ldr	r2, [pc, #164]	@ (8005588 <TIM_Base_SetConfig+0x154>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a10      	ldr	r2, [pc, #64]	@ (8005560 <TIM_Base_SetConfig+0x12c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0xf8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a12      	ldr	r2, [pc, #72]	@ (8005570 <TIM_Base_SetConfig+0x13c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40001800 	.word	0x40001800
 8005584:	40001c00 	.word	0x40001c00
 8005588:	40002000 	.word	0x40002000

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f023 0201 	bic.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005664 <TIM_OC1_SetConfig+0xd8>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 0302 	bic.w	r3, r3, #2
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a21      	ldr	r2, [pc, #132]	@ (8005668 <TIM_OC1_SetConfig+0xdc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC1_SetConfig+0x64>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a20      	ldr	r2, [pc, #128]	@ (800566c <TIM_OC1_SetConfig+0xe0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10c      	bne.n	800560a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0308 	bic.w	r3, r3, #8
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	@ (8005668 <TIM_OC1_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC1_SetConfig+0x8e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	@ (800566c <TIM_OC1_SetConfig+0xe0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d111      	bne.n	800563e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	fffeff8f 	.word	0xfffeff8f
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f023 0210 	bic.w	r2, r3, #16
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b2e      	ldr	r3, [pc, #184]	@ (8005754 <TIM_OC2_SetConfig+0xe4>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a23      	ldr	r2, [pc, #140]	@ (8005758 <TIM_OC2_SetConfig+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC2_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a22      	ldr	r2, [pc, #136]	@ (800575c <TIM_OC2_SetConfig+0xec>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d10d      	bne.n	80056f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <TIM_OC2_SetConfig+0xe8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_OC2_SetConfig+0x94>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	@ (800575c <TIM_OC2_SetConfig+0xec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d113      	bne.n	800572c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800570a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	feff8fff 	.word	0xfeff8fff
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b2d      	ldr	r3, [pc, #180]	@ (8005840 <TIM_OC3_SetConfig+0xe0>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a22      	ldr	r2, [pc, #136]	@ (8005844 <TIM_OC3_SetConfig+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC3_SetConfig+0x66>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <TIM_OC3_SetConfig+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10d      	bne.n	80057e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a17      	ldr	r2, [pc, #92]	@ (8005844 <TIM_OC3_SetConfig+0xe4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_OC3_SetConfig+0x92>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <TIM_OC3_SetConfig+0xe8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d113      	bne.n	800581a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	fffeff8f 	.word	0xfffeff8f
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400

0800584c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4b1e      	ldr	r3, [pc, #120]	@ (80058f0 <TIM_OC4_SetConfig+0xa4>)
 8005878:	4013      	ands	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	031b      	lsls	r3, r3, #12
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a13      	ldr	r2, [pc, #76]	@ (80058f4 <TIM_OC4_SetConfig+0xa8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC4_SetConfig+0x68>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <TIM_OC4_SetConfig+0xac>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d109      	bne.n	80058c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	feff8fff 	.word	0xfeff8fff
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400

080058fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <TIM_OC5_SetConfig+0x98>)
 8005928:	4013      	ands	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800593c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <TIM_OC5_SetConfig+0x9c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC5_SetConfig+0x5e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a11      	ldr	r2, [pc, #68]	@ (800599c <TIM_OC5_SetConfig+0xa0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d109      	bne.n	800596e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	fffeff8f 	.word	0xfffeff8f
 8005998:	40010000 	.word	0x40010000
 800599c:	40010400 	.word	0x40010400

080059a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <TIM_OC6_SetConfig+0x9c>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	051b      	lsls	r3, r3, #20
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a13      	ldr	r2, [pc, #76]	@ (8005a40 <TIM_OC6_SetConfig+0xa0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC6_SetConfig+0x60>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a12      	ldr	r2, [pc, #72]	@ (8005a44 <TIM_OC6_SetConfig+0xa4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d109      	bne.n	8005a14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	029b      	lsls	r3, r3, #10
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	feff8fff 	.word	0xfeff8fff
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 030a 	bic.w	r3, r3, #10
 8005a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0210 	bic.w	r2, r3, #16
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ae2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f043 0307 	orr.w	r3, r3, #7
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2201      	movs	r2, #1
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e06d      	b.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a30      	ldr	r2, [pc, #192]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d108      	bne.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a20      	ldr	r2, [pc, #128]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d022      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c52:	d01d      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10c      	bne.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40000800 	.word	0x40000800
 8005cd8:	40000c00 	.word	0x40000c00
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40001800 	.word	0x40001800

08005ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e040      	b.n	8005d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc f8e8 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	@ 0x24
 8005d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa8c 	bl	8006248 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f825 	bl	8005d80 <UART_SetConfig>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e01b      	b.n	8005d78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb0b 	bl	800638c <UART_CheckIdleState>
 8005d76:	4603      	mov	r3, r0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4ba6      	ldr	r3, [pc, #664]	@ (8006044 <UART_SetConfig+0x2c4>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a94      	ldr	r2, [pc, #592]	@ (8006048 <UART_SetConfig+0x2c8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d120      	bne.n	8005e3e <UART_SetConfig+0xbe>
 8005dfc:	4b93      	ldr	r3, [pc, #588]	@ (800604c <UART_SetConfig+0x2cc>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d816      	bhi.n	8005e38 <UART_SetConfig+0xb8>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0x90>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e2d 	.word	0x08005e2d
 8005e18:	08005e27 	.word	0x08005e27
 8005e1c:	08005e33 	.word	0x08005e33
 8005e20:	2301      	movs	r3, #1
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e150      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e26:	2302      	movs	r3, #2
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e14d      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e14a      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e32:	2308      	movs	r3, #8
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e147      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e144      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a83      	ldr	r2, [pc, #524]	@ (8006050 <UART_SetConfig+0x2d0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d132      	bne.n	8005eae <UART_SetConfig+0x12e>
 8005e48:	4b80      	ldr	r3, [pc, #512]	@ (800604c <UART_SetConfig+0x2cc>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d828      	bhi.n	8005ea8 <UART_SetConfig+0x128>
 8005e56:	a201      	add	r2, pc, #4	@ (adr r2, 8005e5c <UART_SetConfig+0xdc>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005ea9 	.word	0x08005ea9
 8005e68:	08005ea9 	.word	0x08005ea9
 8005e6c:	08005e9d 	.word	0x08005e9d
 8005e70:	08005ea9 	.word	0x08005ea9
 8005e74:	08005ea9 	.word	0x08005ea9
 8005e78:	08005ea9 	.word	0x08005ea9
 8005e7c:	08005e97 	.word	0x08005e97
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005ea3 	.word	0x08005ea3
 8005e90:	2300      	movs	r3, #0
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e118      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e96:	2302      	movs	r3, #2
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e115      	b.n	80060c8 <UART_SetConfig+0x348>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e112      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e10f      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e10c      	b.n	80060c8 <UART_SetConfig+0x348>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a68      	ldr	r2, [pc, #416]	@ (8006054 <UART_SetConfig+0x2d4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d120      	bne.n	8005efa <UART_SetConfig+0x17a>
 8005eb8:	4b64      	ldr	r3, [pc, #400]	@ (800604c <UART_SetConfig+0x2cc>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ec2:	2b30      	cmp	r3, #48	@ 0x30
 8005ec4:	d013      	beq.n	8005eee <UART_SetConfig+0x16e>
 8005ec6:	2b30      	cmp	r3, #48	@ 0x30
 8005ec8:	d814      	bhi.n	8005ef4 <UART_SetConfig+0x174>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d009      	beq.n	8005ee2 <UART_SetConfig+0x162>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d810      	bhi.n	8005ef4 <UART_SetConfig+0x174>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <UART_SetConfig+0x15c>
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d006      	beq.n	8005ee8 <UART_SetConfig+0x168>
 8005eda:	e00b      	b.n	8005ef4 <UART_SetConfig+0x174>
 8005edc:	2300      	movs	r3, #0
 8005ede:	77fb      	strb	r3, [r7, #31]
 8005ee0:	e0f2      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	77fb      	strb	r3, [r7, #31]
 8005ee6:	e0ef      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e0ec      	b.n	80060c8 <UART_SetConfig+0x348>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e0e9      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e0e6      	b.n	80060c8 <UART_SetConfig+0x348>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a56      	ldr	r2, [pc, #344]	@ (8006058 <UART_SetConfig+0x2d8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d120      	bne.n	8005f46 <UART_SetConfig+0x1c6>
 8005f04:	4b51      	ldr	r3, [pc, #324]	@ (800604c <UART_SetConfig+0x2cc>)
 8005f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f10:	d013      	beq.n	8005f3a <UART_SetConfig+0x1ba>
 8005f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f14:	d814      	bhi.n	8005f40 <UART_SetConfig+0x1c0>
 8005f16:	2b80      	cmp	r3, #128	@ 0x80
 8005f18:	d009      	beq.n	8005f2e <UART_SetConfig+0x1ae>
 8005f1a:	2b80      	cmp	r3, #128	@ 0x80
 8005f1c:	d810      	bhi.n	8005f40 <UART_SetConfig+0x1c0>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <UART_SetConfig+0x1a8>
 8005f22:	2b40      	cmp	r3, #64	@ 0x40
 8005f24:	d006      	beq.n	8005f34 <UART_SetConfig+0x1b4>
 8005f26:	e00b      	b.n	8005f40 <UART_SetConfig+0x1c0>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e0cc      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e0c9      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f34:	2304      	movs	r3, #4
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e0c6      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e0c3      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f40:	2310      	movs	r3, #16
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e0c0      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a44      	ldr	r2, [pc, #272]	@ (800605c <UART_SetConfig+0x2dc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d125      	bne.n	8005f9c <UART_SetConfig+0x21c>
 8005f50:	4b3e      	ldr	r3, [pc, #248]	@ (800604c <UART_SetConfig+0x2cc>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f5e:	d017      	beq.n	8005f90 <UART_SetConfig+0x210>
 8005f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f64:	d817      	bhi.n	8005f96 <UART_SetConfig+0x216>
 8005f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6a:	d00b      	beq.n	8005f84 <UART_SetConfig+0x204>
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f70:	d811      	bhi.n	8005f96 <UART_SetConfig+0x216>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <UART_SetConfig+0x1fe>
 8005f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f7a:	d006      	beq.n	8005f8a <UART_SetConfig+0x20a>
 8005f7c:	e00b      	b.n	8005f96 <UART_SetConfig+0x216>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e0a1      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f84:	2302      	movs	r3, #2
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e09e      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e09b      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f90:	2308      	movs	r3, #8
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e098      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f96:	2310      	movs	r3, #16
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e095      	b.n	80060c8 <UART_SetConfig+0x348>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8006060 <UART_SetConfig+0x2e0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d125      	bne.n	8005ff2 <UART_SetConfig+0x272>
 8005fa6:	4b29      	ldr	r3, [pc, #164]	@ (800604c <UART_SetConfig+0x2cc>)
 8005fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005fb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb4:	d017      	beq.n	8005fe6 <UART_SetConfig+0x266>
 8005fb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fba:	d817      	bhi.n	8005fec <UART_SetConfig+0x26c>
 8005fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc0:	d00b      	beq.n	8005fda <UART_SetConfig+0x25a>
 8005fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc6:	d811      	bhi.n	8005fec <UART_SetConfig+0x26c>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <UART_SetConfig+0x254>
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd0:	d006      	beq.n	8005fe0 <UART_SetConfig+0x260>
 8005fd2:	e00b      	b.n	8005fec <UART_SetConfig+0x26c>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	77fb      	strb	r3, [r7, #31]
 8005fd8:	e076      	b.n	80060c8 <UART_SetConfig+0x348>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	77fb      	strb	r3, [r7, #31]
 8005fde:	e073      	b.n	80060c8 <UART_SetConfig+0x348>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e070      	b.n	80060c8 <UART_SetConfig+0x348>
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e06d      	b.n	80060c8 <UART_SetConfig+0x348>
 8005fec:	2310      	movs	r3, #16
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e06a      	b.n	80060c8 <UART_SetConfig+0x348>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <UART_SetConfig+0x2e4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d138      	bne.n	800606e <UART_SetConfig+0x2ee>
 8005ffc:	4b13      	ldr	r3, [pc, #76]	@ (800604c <UART_SetConfig+0x2cc>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006002:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006006:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600a:	d017      	beq.n	800603c <UART_SetConfig+0x2bc>
 800600c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006010:	d82a      	bhi.n	8006068 <UART_SetConfig+0x2e8>
 8006012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006016:	d00b      	beq.n	8006030 <UART_SetConfig+0x2b0>
 8006018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601c:	d824      	bhi.n	8006068 <UART_SetConfig+0x2e8>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <UART_SetConfig+0x2aa>
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006026:	d006      	beq.n	8006036 <UART_SetConfig+0x2b6>
 8006028:	e01e      	b.n	8006068 <UART_SetConfig+0x2e8>
 800602a:	2300      	movs	r3, #0
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e04b      	b.n	80060c8 <UART_SetConfig+0x348>
 8006030:	2302      	movs	r3, #2
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e048      	b.n	80060c8 <UART_SetConfig+0x348>
 8006036:	2304      	movs	r3, #4
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e045      	b.n	80060c8 <UART_SetConfig+0x348>
 800603c:	2308      	movs	r3, #8
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e042      	b.n	80060c8 <UART_SetConfig+0x348>
 8006042:	bf00      	nop
 8006044:	efff69f3 	.word	0xefff69f3
 8006048:	40011000 	.word	0x40011000
 800604c:	40023800 	.word	0x40023800
 8006050:	40004400 	.word	0x40004400
 8006054:	40004800 	.word	0x40004800
 8006058:	40004c00 	.word	0x40004c00
 800605c:	40005000 	.word	0x40005000
 8006060:	40011400 	.word	0x40011400
 8006064:	40007800 	.word	0x40007800
 8006068:	2310      	movs	r3, #16
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e02c      	b.n	80060c8 <UART_SetConfig+0x348>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a72      	ldr	r2, [pc, #456]	@ (800623c <UART_SetConfig+0x4bc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d125      	bne.n	80060c4 <UART_SetConfig+0x344>
 8006078:	4b71      	ldr	r3, [pc, #452]	@ (8006240 <UART_SetConfig+0x4c0>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006082:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006086:	d017      	beq.n	80060b8 <UART_SetConfig+0x338>
 8006088:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800608c:	d817      	bhi.n	80060be <UART_SetConfig+0x33e>
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006092:	d00b      	beq.n	80060ac <UART_SetConfig+0x32c>
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006098:	d811      	bhi.n	80060be <UART_SetConfig+0x33e>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <UART_SetConfig+0x326>
 800609e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a2:	d006      	beq.n	80060b2 <UART_SetConfig+0x332>
 80060a4:	e00b      	b.n	80060be <UART_SetConfig+0x33e>
 80060a6:	2300      	movs	r3, #0
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e00d      	b.n	80060c8 <UART_SetConfig+0x348>
 80060ac:	2302      	movs	r3, #2
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e00a      	b.n	80060c8 <UART_SetConfig+0x348>
 80060b2:	2304      	movs	r3, #4
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e007      	b.n	80060c8 <UART_SetConfig+0x348>
 80060b8:	2308      	movs	r3, #8
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e004      	b.n	80060c8 <UART_SetConfig+0x348>
 80060be:	2310      	movs	r3, #16
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e001      	b.n	80060c8 <UART_SetConfig+0x348>
 80060c4:	2310      	movs	r3, #16
 80060c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d0:	d15b      	bne.n	800618a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d828      	bhi.n	800612a <UART_SetConfig+0x3aa>
 80060d8:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x360>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006105 	.word	0x08006105
 80060e4:	0800610d 	.word	0x0800610d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	0800612b 	.word	0x0800612b
 80060f0:	0800611b 	.word	0x0800611b
 80060f4:	0800612b 	.word	0x0800612b
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	0800612b 	.word	0x0800612b
 8006100:	08006123 	.word	0x08006123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fe f936 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 8006108:	61b8      	str	r0, [r7, #24]
        break;
 800610a:	e013      	b.n	8006134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe f946 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8006110:	61b8      	str	r0, [r7, #24]
        break;
 8006112:	e00f      	b.n	8006134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006114:	4b4b      	ldr	r3, [pc, #300]	@ (8006244 <UART_SetConfig+0x4c4>)
 8006116:	61bb      	str	r3, [r7, #24]
        break;
 8006118:	e00c      	b.n	8006134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611a:	f7fe f819 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800611e:	61b8      	str	r0, [r7, #24]
        break;
 8006120:	e008      	b.n	8006134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006126:	61bb      	str	r3, [r7, #24]
        break;
 8006128:	e004      	b.n	8006134 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	77bb      	strb	r3, [r7, #30]
        break;
 8006132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d074      	beq.n	8006224 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	005a      	lsls	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b0f      	cmp	r3, #15
 8006154:	d916      	bls.n	8006184 <UART_SetConfig+0x404>
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800615c:	d212      	bcs.n	8006184 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f023 030f 	bic.w	r3, r3, #15
 8006166:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	b29b      	uxth	r3, r3
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	b29a      	uxth	r2, r3
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	4313      	orrs	r3, r2
 8006178:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	89fa      	ldrh	r2, [r7, #14]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	e04f      	b.n	8006224 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	77bb      	strb	r3, [r7, #30]
 8006188:	e04c      	b.n	8006224 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d828      	bhi.n	80061e2 <UART_SetConfig+0x462>
 8006190:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <UART_SetConfig+0x418>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	080061e3 	.word	0x080061e3
 80061a8:	080061d3 	.word	0x080061d3
 80061ac:	080061e3 	.word	0x080061e3
 80061b0:	080061e3 	.word	0x080061e3
 80061b4:	080061e3 	.word	0x080061e3
 80061b8:	080061db 	.word	0x080061db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061bc:	f7fe f8da 	bl	8004374 <HAL_RCC_GetPCLK1Freq>
 80061c0:	61b8      	str	r0, [r7, #24]
        break;
 80061c2:	e013      	b.n	80061ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c4:	f7fe f8ea 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 80061c8:	61b8      	str	r0, [r7, #24]
        break;
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006244 <UART_SetConfig+0x4c4>)
 80061ce:	61bb      	str	r3, [r7, #24]
        break;
 80061d0:	e00c      	b.n	80061ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d2:	f7fd ffbd 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80061d6:	61b8      	str	r0, [r7, #24]
        break;
 80061d8:	e008      	b.n	80061ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061de:	61bb      	str	r3, [r7, #24]
        break;
 80061e0:	e004      	b.n	80061ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77bb      	strb	r3, [r7, #30]
        break;
 80061ea:	bf00      	nop
    }

    if (pclk != 0U)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d018      	beq.n	8006224 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	085a      	lsrs	r2, r3, #1
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b0f      	cmp	r3, #15
 800620a:	d909      	bls.n	8006220 <UART_SetConfig+0x4a0>
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006212:	d205      	bcs.n	8006220 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60da      	str	r2, [r3, #12]
 800621e:	e001      	b.n	8006224 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006230:	7fbb      	ldrb	r3, [r7, #30]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40007c00 	.word	0x40007c00
 8006240:	40023800 	.word	0x40023800
 8006244:	00f42400 	.word	0x00f42400

08006248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01a      	beq.n	800635e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006346:	d10a      	bne.n	800635e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b098      	sub	sp, #96	@ 0x60
 8006390:	af02      	add	r7, sp, #8
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800639c:	f7fb ff34 	bl	8002208 <HAL_GetTick>
 80063a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d12e      	bne.n	800640e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f88c 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d021      	beq.n	800640e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063de:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e062      	b.n	80064d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d149      	bne.n	80064b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f856 	bl	80064dc <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d03c      	beq.n	80064b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	623b      	str	r3, [r7, #32]
   return(result);
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800644a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30
 8006456:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800645a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e6      	bne.n	8006436 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	e853 3f00 	ldrex	r3, [r3]
 8006476:	60fb      	str	r3, [r7, #12]
   return(result);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006488:	61fa      	str	r2, [r7, #28]
 800648a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	69b9      	ldr	r1, [r7, #24]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	617b      	str	r3, [r7, #20]
   return(result);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e5      	bne.n	8006468 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e011      	b.n	80064d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3758      	adds	r7, #88	@ 0x58
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ec:	e04f      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d04b      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f6:	f7fb fe87 	bl	8002208 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <UART_WaitOnFlagUntilTimeout+0x30>
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e04e      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d037      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b80      	cmp	r3, #128	@ 0x80
 8006522:	d034      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b40      	cmp	r3, #64	@ 0x40
 8006528:	d031      	beq.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b08      	cmp	r3, #8
 8006536:	d110      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2208      	movs	r2, #8
 800653e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f838 	bl	80065b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2208      	movs	r2, #8
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e029      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006568:	d111      	bne.n	800658e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f81e 	bl	80065b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e00f      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4013      	ands	r3, r2
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	429a      	cmp	r2, r3
 800659c:	bf0c      	ite	eq
 800659e:	2301      	moveq	r3, #1
 80065a0:	2300      	movne	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d0a0      	beq.n	80064ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b095      	sub	sp, #84	@ 0x54
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80065de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006628:	2b01      	cmp	r3, #1
 800662a:	d118      	bne.n	800665e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	60bb      	str	r3, [r7, #8]
   return(result);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f023 0310 	bic.w	r3, r3, #16
 8006640:	647b      	str	r3, [r7, #68]	@ 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	61bb      	str	r3, [r7, #24]
 800664c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	613b      	str	r3, [r7, #16]
   return(result);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e6      	bne.n	800662c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006672:	bf00      	nop
 8006674:	3754      	adds	r7, #84	@ 0x54
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006680:	b084      	sub	sp, #16
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	f107 001c 	add.w	r0, r7, #28
 800668e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006692:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006696:	2b01      	cmp	r3, #1
 8006698:	d121      	bne.n	80066de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	4b21      	ldr	r3, [pc, #132]	@ (8006730 <USB_CoreInit+0xb0>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d105      	bne.n	80066d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa92 	bl	8006bfc <USB_CoreReset>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e010      	b.n	8006700 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa86 	bl	8006bfc <USB_CoreReset>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006700:	7fbb      	ldrb	r3, [r7, #30]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10b      	bne.n	800671e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f043 0206 	orr.w	r2, r3, #6
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800672a:	b004      	add	sp, #16
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	ffbdffbf 	.word	0xffbdffbf

08006734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 0201 	bic.w	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d115      	bne.n	80067a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006784:	200a      	movs	r0, #10
 8006786:	f7fb fd4b 	bl	8002220 <HAL_Delay>
      ms += 10U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	330a      	adds	r3, #10
 800678e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa25 	bl	8006be0 <USB_GetMode>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d01e      	beq.n	80067da <USB_SetCurrentMode+0x84>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2bc7      	cmp	r3, #199	@ 0xc7
 80067a0:	d9f0      	bls.n	8006784 <USB_SetCurrentMode+0x2e>
 80067a2:	e01a      	b.n	80067da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d115      	bne.n	80067d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80067b6:	200a      	movs	r0, #10
 80067b8:	f7fb fd32 	bl	8002220 <HAL_Delay>
      ms += 10U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	330a      	adds	r3, #10
 80067c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa0c 	bl	8006be0 <USB_GetMode>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <USB_SetCurrentMode+0x84>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80067d2:	d9f0      	bls.n	80067b6 <USB_SetCurrentMode+0x60>
 80067d4:	e001      	b.n	80067da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e005      	b.n	80067e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80067de:	d101      	bne.n	80067e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f0:	b084      	sub	sp, #16
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80067fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e009      	b.n	8006824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3340      	adds	r3, #64	@ 0x40
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3301      	adds	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b0e      	cmp	r3, #14
 8006828:	d9f2      	bls.n	8006810 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800682a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11c      	bne.n	800686c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e005      	b.n	8006878 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006870:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800687e:	461a      	mov	r2, r3
 8006880:	2300      	movs	r3, #0
 8006882:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006884:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006888:	2b01      	cmp	r3, #1
 800688a:	d10d      	bne.n	80068a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800688c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f968 	bl	8006b6c <USB_SetDevSpeed>
 800689c:	e008      	b.n	80068b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f963 	bl	8006b6c <USB_SetDevSpeed>
 80068a6:	e003      	b.n	80068b0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068a8:	2103      	movs	r1, #3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f95e 	bl	8006b6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068b0:	2110      	movs	r1, #16
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f8fa 	bl	8006aac <USB_FlushTxFifo>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f924 	bl	8006b10 <USB_FlushRxFifo>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	e043      	b.n	8006984 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800690e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006912:	d118      	bne.n	8006946 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006926:	461a      	mov	r2, r3
 8006928:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e013      	b.n	8006958 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693c:	461a      	mov	r2, r3
 800693e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	e008      	b.n	8006958 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006952:	461a      	mov	r2, r3
 8006954:	2300      	movs	r3, #0
 8006956:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006964:	461a      	mov	r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006976:	461a      	mov	r2, r3
 8006978:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800697c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	3301      	adds	r3, #1
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006988:	461a      	mov	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4293      	cmp	r3, r2
 800698e:	d3b5      	bcc.n	80068fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	e043      	b.n	8006a1e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069ac:	d118      	bne.n	80069e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e013      	b.n	80069f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d6:	461a      	mov	r2, r3
 80069d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e008      	b.n	80069f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	461a      	mov	r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	613b      	str	r3, [r7, #16]
 8006a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a22:	461a      	mov	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d3b5      	bcc.n	8006996 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f043 0210 	orr.w	r2, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa4 <USB_DevInit+0x2b4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f043 0208 	orr.w	r2, r3, #8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d105      	bne.n	8006a94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <USB_DevInit+0x2b8>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa0:	b004      	add	sp, #16
 8006aa2:	4770      	bx	lr
 8006aa4:	803c3800 	.word	0x803c3800
 8006aa8:	40000004 	.word	0x40000004

08006aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ac6:	d901      	bls.n	8006acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e01b      	b.n	8006b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	daf2      	bge.n	8006aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	019b      	lsls	r3, r3, #6
 8006adc:	f043 0220 	orr.w	r2, r3, #32
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006af0:	d901      	bls.n	8006af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e006      	b.n	8006b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d0f0      	beq.n	8006ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b28:	d901      	bls.n	8006b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e018      	b.n	8006b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	daf2      	bge.n	8006b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2210      	movs	r2, #16
 8006b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b4c:	d901      	bls.n	8006b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e006      	b.n	8006b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d0f0      	beq.n	8006b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bb8:	f023 0303 	bic.w	r3, r3, #3
 8006bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bcc:	f043 0302 	orr.w	r3, r3, #2
 8006bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0301 	and.w	r3, r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c14:	d901      	bls.n	8006c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e01b      	b.n	8006c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	daf2      	bge.n	8006c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f043 0201 	orr.w	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c3e:	d901      	bls.n	8006c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e006      	b.n	8006c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d0f0      	beq.n	8006c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <memset>:
 8006c5e:	4402      	add	r2, r0
 8006c60:	4603      	mov	r3, r0
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d100      	bne.n	8006c68 <memset+0xa>
 8006c66:	4770      	bx	lr
 8006c68:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6c:	e7f9      	b.n	8006c62 <memset+0x4>
	...

08006c70 <__libc_init_array>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4d0d      	ldr	r5, [pc, #52]	@ (8006ca8 <__libc_init_array+0x38>)
 8006c74:	4c0d      	ldr	r4, [pc, #52]	@ (8006cac <__libc_init_array+0x3c>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	42a6      	cmp	r6, r4
 8006c7e:	d109      	bne.n	8006c94 <__libc_init_array+0x24>
 8006c80:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb0 <__libc_init_array+0x40>)
 8006c82:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb4 <__libc_init_array+0x44>)
 8006c84:	f000 f818 	bl	8006cb8 <_init>
 8006c88:	1b64      	subs	r4, r4, r5
 8006c8a:	10a4      	asrs	r4, r4, #2
 8006c8c:	2600      	movs	r6, #0
 8006c8e:	42a6      	cmp	r6, r4
 8006c90:	d105      	bne.n	8006c9e <__libc_init_array+0x2e>
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c98:	4798      	blx	r3
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7ee      	b.n	8006c7c <__libc_init_array+0xc>
 8006c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca2:	4798      	blx	r3
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	e7f2      	b.n	8006c8e <__libc_init_array+0x1e>
 8006ca8:	08006d78 	.word	0x08006d78
 8006cac:	08006d78 	.word	0x08006d78
 8006cb0:	08006d78 	.word	0x08006d78
 8006cb4:	08006d7c 	.word	0x08006d7c

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
